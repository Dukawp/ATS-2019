/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:13:04 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Cars;
import Model.Owner;
import Utils.Point;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cars_ESTest extends Cars_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double(4573.0);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      Car.CarType car_CarType0 = Car.CarType.electric;
      try { 
        cars0.getCar("MaisBarato", point1, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Point point1 = point0.clone();
      try { 
        cars0.getCar("MaisPerto", point1, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("", "", "knnJONq4IHE3,v[c::", (-7018), "~80?|)!Ud");
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, (-1.0), (-1.0), 100, point0, "~80?|)!Ud");
      cars0.addCar(car0);
      ArrayList<Car> arrayList0 = cars0.listOfCarType(car_CarType0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("", "", "", 0, "Model.Cars");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0.0, 0, point0, "%.2f Horas");
      cars0.addCar(car0);
      Car car1 = cars0.getCar("MaisPerto", point0, point0, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("", "", "", 0, (String) null);
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0.0, 0, point0, "%.2f Horas");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, point0, 385.080499721942, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("", "", "", 0, "Model.Cars");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0.0, 0, point0, "%.2f Horas");
      cars0.addCar(car0);
      Car car1 = cars0.getCar(point0, 0.0, car_CarType0);
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.electric;
      // Undeclared exception!
      try { 
        cars0.getCar((String) null, (Point) null, (Point) null, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("", "", "", 0, "Model.Cars");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0.0, 0, point0, "%.2f Horas");
      cars0.addCar(car0);
      // Undeclared exception!
      try { 
        cars0.getCar(point0, (Point) null, 0.0, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cars cars0 = new Cars();
      // Undeclared exception!
      try { 
        cars0.addCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cars cars0 = new Cars();
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      boolean boolean0 = cars0.equals(arrayList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals(cars0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cars cars0 = new Cars();
      boolean boolean0 = cars0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1237.838147));
      Point point0 = new Point(double0, double0);
      try { 
        cars0.getCar("lvN#Fy|^g[CSD_E5D)", point0, point0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Cars cars0 = new Cars();
      try { 
        cars0.searchCar("Model.Cars");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("", "", "", (-7018), "");
      Double double0 = new Double((-7018));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-7018), (-7018), (-7018), (-7018), point0, "");
      cars0.addCar(car0);
      Car car1 = cars0.searchCar("");
      assertSame(car1, car0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cars cars0 = new Cars();
      Owner owner0 = new Owner("", "", "", 0, "Model.Cars");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0.0, 0, point0, "%.2f Horas");
      cars0.addCar(car0);
      try { 
        cars0.addCar(car0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Cars cars0 = new Cars();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.any;
      try { 
        cars0.getCar(point0, 1.0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0.1);
      Point point0 = new Point(double0, double0);
      try { 
        cars0.getCar(point0, (Point) null, 0.0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cars cars0 = new Cars();
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      ArrayList<Car> arrayList0 = cars0.listOfCarType(car_CarType0);
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cars cars0 = new Cars();
      Cars cars1 = cars0.clone();
      boolean boolean0 = cars1.equals(cars0);
      assertTrue(boolean0);
  }
}
