/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:19:09 GMT 2019
 */

package View;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import View.Menu;
import View.ViewModel.NewLogin;
import View.ViewModel.TimeInterval;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Menu_ESTest extends Menu_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = "@MVz('*";
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      assertNotNull(timeInterval0);
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertFalse(set0.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      
      boolean boolean0 = linkedList0.add(list0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains(list0));
      assertFalse(set0.contains(string0));
      assertFalse(list0.contains(string0));
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertEquals(0, linkedList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(set0.contains(string0));
      assertFalse(list1.contains(string0));
      
      boolean boolean1 = linkedList0.add(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(list1, list0);
      assertEquals(2, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(set0.isEmpty());
      assertEquals(600, set0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.contains(list1));
      assertFalse(set0.contains(string0));
      assertFalse(list1.contains(string0));
      
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = "  <]^oEDK";
      String string1 = menu0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n", string1);
      assertNotNull(string1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      int int0 = menu0.showRentalRate("  <]^oEDK");
      assertEquals(1, int0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      // Undeclared exception!
      try { 
        menu0.showString("  <]^oEDK");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("X8I0txF{iL&b%c");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      SystemInUtil.addInputLine("Registar novo utilizador");
      try { 
        menu0.newRegisterCar("uOl;-xY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SystemInUtil.addInputLine("(");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      SystemInUtil.addInputLine("X");
      SystemInUtil.addInputLine("X");
      SystemInUtil.addInputLine("d");
      SystemInUtil.addInputLine("d");
      String string0 = "0";
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      String string1 = "F~T";
      try { 
        menu1.newRegisterUser("ZRUz>8q3Z0u&2S:");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "9";
      SystemInUtil.addInputLine("9");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Register;
      SystemInUtil.addInputLine((String) null);
      Menu menu1 = menu0.parser();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertTrue(menu1.getRun());
      
      Menu menu2 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Register, menu0.getMenu());
      assertEquals(Menu.MenuInd.Register, menu2.getMenu());
      assertTrue(menu2.getRun());
      
      // Undeclared exception!
      try { 
        menu2.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      String string0 = "DYQ@n+dTH8I";
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = menu1.carOverviewShow("DYQ@n+dTH8I", linkedList0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(string1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertEquals(0, linkedList0.size());
      
      SystemInUtil.addInputLine("TY>swj$~%?{Z");
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.NUses;
      SystemInUtil.addInputLine("0");
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.NUses, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.NUses, menu1.getMenu());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.NUses, menu2.getMenu());
      
      String string2 = "";
      // Undeclared exception!
      try { 
        menu2.walkingDistanceRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "";
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      SystemInUtil.addInputLine("0");
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Owner;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Owner, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Owner, menu1.getMenu());
      assertTrue(menu1.getRun());
      
      // Undeclared exception!
      try { 
        menu0.autonomyCarRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      SystemInUtil.addInputLine("");
      boolean boolean0 = menu1.getRun();
      assertFalse(boolean0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu menu2 = menu1.back();
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      
      // Undeclared exception!
      try { 
        menu2.newRegisterUser("Fim de Intervalo (yyyy-MM-dd HH:mm):");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Top10Clients;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Top10Clients, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Top10Clients, menu1.getMenu());
      assertTrue(menu1.getRun());
      
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("<Gn");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      String string0 = "QS}l?0n";
      NewLogin newLogin0 = menu0.newLogin("QS}l?0n");
      assertSame(menu0, menu1);
      assertNotNull(newLogin0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals("0", newLogin0.getUser());
      assertEquals("0", newLogin0.getPassword());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Client;
      Menu menu2 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertEquals(Menu.MenuInd.Client, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Client, menu2.getMenu());
      
      int int0 = 811;
      Month month0 = Month.JULY;
      // Undeclared exception!
      try { 
        menu2.pendingRateShow("", "QS}l?0n", 811);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      SystemInUtil.addInputLine("Registar novo utilizador");
      // Undeclared exception!
      try { 
        menu0.newRegisterCar("uOl;-xY");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      SystemInUtil.addInputLine("");
      boolean boolean0 = menu1.getRun();
      assertFalse(boolean0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      Menu menu2 = menu1.back();
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      assertFalse(menu2.getRun());
      
      String string0 = "";
      // Undeclared exception!
      menu2.showRentalRate(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SystemInUtil.addInputLine("g*2Tx7U");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Autonomy;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Autonomy, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Autonomy, menu1.getMenu());
      
      String string0 = ".H^4wEb:Q";
      int int0 = 0;
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      assertNotNull(localDateTime0);
      
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      assertNotNull(timeInterval0);
      
      menu1.rentalHistoryShow(timeInterval0, linkedList0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertEquals(Menu.MenuInd.Autonomy, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Autonomy, menu1.getMenu());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.removeLastOccurrence(".H^4wEb:Q");
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.removeFirstOccurrence(menu0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(menu0, menu1);
      assertEquals(Menu.MenuInd.Autonomy, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu0.reviewRentShow((String) null, 0, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      String string0 = " 3 B";
      SystemInUtil.addInputLine("a\"u`n");
      int int0 = (-1660);
      try { 
        menu0.pendingRateShow(" 3 B", "a\"u`n", (-1660));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      SystemInUtil.addInputLine("l|sV(R(pW");
      try { 
        menu0.pendingRateShow("6aNooFw2$F{$", "K", 18);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      String string0 = ".C`jZ5";
      SystemInUtil.addInputLine("");
      Menu menu2 = menu1.back();
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu1, menu2);
      assertSame(menu1, menu0);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      assertFalse(menu2.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Stream<List<String>> stream0 = linkedList0.stream();
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      String string1 = menu1.reviewRentShow(".C`jZ5", (-3736), linkedList0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu1, menu2);
      assertSame(menu1, menu0);
      assertNotNull(string1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertEquals(0, linkedList0.size());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.CheapestNear;
      Menu menu3 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu0, menu3);
      assertSame(menu3, menu1);
      assertSame(menu3, menu2);
      assertSame(menu3, menu0);
      assertNotNull(menu3);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.CheapestNear, menu0.getMenu());
      assertEquals(Menu.MenuInd.CheapestNear, menu3.getMenu());
      assertFalse(menu3.getRun());
      
      // Undeclared exception!
      try { 
        menu1.getTimeInterval("zR<dNHHR-D:zV7");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      String string0 = "0";
      SystemInUtil.addInputLine("0");
      String string1 = "(s[";
      // Undeclared exception!
      try { 
        menu0.pendingRateShow("0", "(s[", 521);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = "0";
      SystemInUtil.addInputLine("0");
      Menu menu1 = menu0.parser();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.NUses;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.NUses, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.NUses, menu1.getMenu());
      assertTrue(menu2.getRun());
      assertEquals(Menu.MenuInd.NUses, menu2.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = "xL) sr7ph0R";
      SystemInUtil.addInputLine("xL) sr7ph0R");
      Locale locale0 = new Locale("r;K");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("r;k", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r;k", locale0.toString());
      assertEquals("r;k", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("r;k", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r;k", locale0.toString());
      assertEquals("r;k", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("0"));
      
      LinkedList<String> linkedList1 = new LinkedList<String>(set0);
      assertNotNull(linkedList1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("r;k", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r;k", locale0.toString());
      assertEquals("r;k", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(set0.contains("0"));
      assertFalse(linkedList1.contains("0"));
      
      boolean boolean0 = linkedList0.add((List<String>) linkedList1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("r;k", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("r;k", locale0.toString());
      assertEquals("r;k", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(set0.contains("0"));
      assertFalse(linkedList1.contains("0"));
      
      // Undeclared exception!
      try { 
        menu0.carOverviewShow(">.;HwN#21a'|4[}", linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Register;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Register, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Register, menu1.getMenu());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Register, menu2.getMenu());
      
      Month month0 = Month.DECEMBER;
      LocalDateTime localDateTime0 = MockLocalDateTime.of(1, month0, 1, 1, 1);
      assertNotNull(localDateTime0);
      
      TimeInterval timeInterval0 = new TimeInterval(localDateTime0, localDateTime0);
      assertNotNull(timeInterval0);
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu2.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Initial;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu menu2 = menu1.back();
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      assertTrue(menu2.getRun());
      
      int int0 = menu0.showRentalRate("0");
      assertEquals(0, int0);
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = "";
      int int1 = (-4289);
      String string1 = "Hibrido";
      // Undeclared exception!
      try { 
        menu0.simpleCarRent("Hibrido");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "";
      SystemInUtil.addInputLine("");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      SystemInUtil.addInputLine("9pKP1^j C");
      Menu menu1 = menu0.parser();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      String string1 = "0";
      SystemInUtil.addInputLine("0");
      String string2 = "";
      menu0.showString("");
      assertSame(menu0, menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Client;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertEquals(Menu.MenuInd.Client, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Client, menu1.getMenu());
      assertTrue(menu2.getRun());
      assertEquals(Menu.MenuInd.Client, menu2.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SystemInUtil.addInputLine("");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      
      boolean boolean0 = linkedList0.add((List<String>) linkedList1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.contains(""));
      
      LinkedList<List<String>> linkedList2 = new LinkedList<List<String>>(linkedList0);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertNotNull(linkedList2);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedList2.size());
      
      LinkedList<String> linkedList3 = new LinkedList<String>();
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertNotNull(linkedList3);
      assertEquals(0, linkedList3.size());
      assertFalse(linkedList3.contains(""));
      
      linkedList2.push(linkedList3);
      assertTrue(linkedList3.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertNotSame(linkedList3, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(linkedList2, linkedList0);
      assertEquals(0, linkedList3.size());
      assertEquals(1, linkedList0.size());
      assertEquals(2, linkedList2.size());
      assertFalse(linkedList3.contains(""));
      
      // Undeclared exception!
      try { 
        menu1.top10ClientsShow(linkedList2, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean0 = linkedList0.add((List<String>) linkedList1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, "Spf");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      // Undeclared exception!
      try { 
        menu0.newRegisterCar("uOl;-xY");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = menu0.toString();
      assertEquals("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n", string0);
      assertNotNull(string0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((List<String>) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      
      boolean boolean1 = linkedList0.containsAll(list0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(list0));
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      
      Iterator<List<String>> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedList0.contains(list0));
      
      // Undeclared exception!
      try { 
        menu1.carOverviewShow("", linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((List<String>) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("])ki5.", 1, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "";
      SystemInUtil.addInputLine("");
      SystemInUtil.addInputLine("");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Owner;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Owner, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Owner, menu1.getMenu());
      
      Menu.MenuInd menu_MenuInd1 = Menu.MenuInd.ReviewRental;
      Menu menu2 = menu1.parser();
      assertFalse(menu_MenuInd0.equals((Object)menu_MenuInd1));
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertNotSame(menu_MenuInd0, menu_MenuInd1);
      assertSame(menu1, menu2);
      assertSame(menu1, menu0);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertEquals(Menu.MenuInd.Owner, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Owner, menu1.getMenu());
      assertEquals(Menu.MenuInd.Owner, menu2.getMenu());
      assertTrue(menu2.getRun());
      
      Menu menu3 = menu0.selectOption(menu_MenuInd1);
      assertFalse(menu_MenuInd1.equals((Object)menu_MenuInd0));
      assertSame(menu0, menu3);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertNotSame(menu_MenuInd1, menu_MenuInd0);
      assertSame(menu3, menu2);
      assertSame(menu3, menu1);
      assertSame(menu3, menu0);
      assertNotNull(menu3);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.ReviewRental, menu0.getMenu());
      assertTrue(menu3.getRun());
      assertEquals(Menu.MenuInd.ReviewRental, menu3.getMenu());
      
      // Undeclared exception!
      try { 
        menu3.newRegisterCar("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = menu0.toString();
      assertEquals("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n", string0);
      assertNotNull(string0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SystemInUtil.addInputLine("");
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      
      boolean boolean0 = linkedList0.containsAll(list0);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(list0));
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      
      Iterator<List<String>> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(list0));
      
      String string1 = menu1.carOverviewShow("", linkedList0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(string1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(list0));
      
      // Undeclared exception!
      try { 
        Menu.MenuInd.valueOf("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant View.Menu.MenuInd.\u001Bc\u001B[31m\t--Initial--
         // \u001B[0m
         // 
         // 1- Login
         // 2- Registar novo utilizador
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      // Undeclared exception!
      try { 
        menu0.selectOption((Menu.MenuInd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Client;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Client, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Client, menu1.getMenu());
      
      String string0 = menu0.toString();
      assertEquals("\u001Bc\u001B[31m\t--Initial/Client--\n\u001B[0m\n\n1- Hist\u00F3rico de alugueres\n2- Avalia\u00E7\u00F5es pendentes\n3- Alugar um carro\n4- UMCarroJ\u00E1 Challenge\n", string0);
      assertSame(menu0, menu1);
      assertNotNull(string0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Client, menu0.getMenu());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Specific;
      SystemInUtil.addInputLine("~");
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Specific, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Specific, menu1.getMenu());
      assertTrue(menu1.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.removeFirstOccurrence(menu0);
      assertFalse(boolean0);
      assertSame(menu0, menu1);
      assertEquals(Menu.MenuInd.Specific, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertEquals(0, linkedList0.size());
      
      String string0 = menu1.reviewRentShow(".H^4wEb:Q", 0, linkedList0);
      assertEquals("~", string0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(string0);
      assertEquals(Menu.MenuInd.Specific, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Specific, menu1.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu0.getTimeInterval(".H^4wEb:Q");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      SystemInUtil.addInputLine("M|tz!-81H:(");
      String string0 = menu0.toString();
      assertEquals("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n", string0);
      assertNotNull(string0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string1 = "";
      // Undeclared exception!
      try { 
        menu0.newRegisterUser("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      SystemInUtil.addInputLine("");
      boolean boolean0 = menu1.getRun();
      assertFalse(boolean0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      Menu menu2 = menu1.back();
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      
      try { 
        menu2.walkingDistanceRent("");
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "0";
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Register;
      Menu menu1 = menu0.parser();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu menu2 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Register, menu0.getMenu());
      assertEquals(Menu.MenuInd.Register, menu2.getMenu());
      assertTrue(menu2.getRun());
      
      // Undeclared exception!
      try { 
        menu2.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      String string0 = "DYQ@n+dTH8I";
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = menu1.carOverviewShow("DYQ@n+dTH8I", linkedList0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(string1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertEquals(0, linkedList0.size());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.NUses;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.NUses, menu0.getMenu());
      assertEquals(Menu.MenuInd.NUses, menu1.getMenu());
      assertFalse(menu1.getRun());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.NUses, menu2.getMenu());
      
      String string2 = "";
      // Undeclared exception!
      try { 
        menu2.walkingDistanceRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Rentals;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Rentals, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Rentals, menu1.getMenu());
      
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Specific;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Specific, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Specific, menu1.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = menu1.getRun();
      assertTrue(boolean0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Specific, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Specific, menu1.getMenu());
      
      // Undeclared exception!
      try { 
        menu1.reviewRentShow(".H^4wEb:Q", 0, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SystemInUtil.addInputLine("M!FOD<Lje");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      menu1.top10ClientsShow(linkedList0, "N");
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(0, linkedList0.size());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Distance;
      Menu menu2 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Distance, menu0.getMenu());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Distance, menu2.getMenu());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Cheapest;
      Menu menu2 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertEquals(Menu.MenuInd.Cheapest, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Cheapest, menu2.getMenu());
      assertFalse(menu2.getRun());
      
      SystemInUtil.addInputLine("~zV|};+;");
      Menu menu3 = menu2.back();
      assertSame(menu0, menu3);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertSame(menu2, menu3);
      assertSame(menu3, menu2);
      assertSame(menu3, menu0);
      assertSame(menu3, menu1);
      assertNotNull(menu3);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu3.getMenu());
      assertFalse(menu3.getRun());
      
      String string0 = "qZ^>y\\9yY=9>0";
      Menu menu4 = menu0.parser();
      assertSame(menu0, menu3);
      assertSame(menu0, menu1);
      assertSame(menu0, menu4);
      assertSame(menu0, menu2);
      assertSame(menu4, menu0);
      assertSame(menu4, menu2);
      assertSame(menu4, menu3);
      assertSame(menu4, menu1);
      assertNotNull(menu4);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu4.getRun());
      assertEquals(Menu.MenuInd.Initial, menu4.getMenu());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        menu2.simpleCarRent("swm6");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      SystemInUtil.addInputLine("QZ[pW%UpS");
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Pending;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Pending, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Pending, menu1.getMenu());
      assertTrue(menu1.getRun());
      
      String string0 = "Y]B\\3 W+05{q.L=LKpd";
      String string1 = "C}.N+r_Dcg}[";
      SystemInUtil.addInputLine("C}.N+r_Dcg}[");
      try { 
        menu1.autonomyCarRent("Y]B\u0003 W+05{q.L=LKpd");
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.NUses;
      Menu menu2 = menu1.back();
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      assertFalse(menu2.getRun());
      
      Menu menu3 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu0, menu3);
      assertSame(menu1, menu0);
      assertSame(menu1, menu3);
      assertSame(menu1, menu2);
      assertSame(menu3, menu2);
      assertSame(menu3, menu1);
      assertSame(menu3, menu0);
      assertNotNull(menu3);
      assertEquals(Menu.MenuInd.NUses, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.NUses, menu1.getMenu());
      assertFalse(menu3.getRun());
      assertEquals(Menu.MenuInd.NUses, menu3.getMenu());
      
      Menu.MenuInd menu_MenuInd1 = Menu.MenuInd.Register;
      Menu menu4 = menu1.selectOption(menu_MenuInd1);
      assertFalse(menu_MenuInd1.equals((Object)menu_MenuInd0));
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu0, menu3);
      assertSame(menu0, menu4);
      assertSame(menu1, menu0);
      assertSame(menu1, menu3);
      assertSame(menu1, menu4);
      assertSame(menu1, menu2);
      assertNotSame(menu_MenuInd1, menu_MenuInd0);
      assertSame(menu4, menu2);
      assertSame(menu4, menu3);
      assertSame(menu4, menu0);
      assertSame(menu4, menu1);
      assertNotNull(menu4);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Register, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Register, menu1.getMenu());
      assertFalse(menu4.getRun());
      assertEquals(Menu.MenuInd.Register, menu4.getMenu());
      
      // Undeclared exception!
      try { 
        menu3.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      SystemInUtil.addInputLine("");
      boolean boolean0 = menu1.getRun();
      assertFalse(boolean0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu menu2 = menu1.back();
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      assertFalse(menu2.getRun());
      
      // Undeclared exception!
      try { 
        menu1.simpleCarRent("j$tT%%nNLYH54C#Ms");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SystemInUtil.addInputLine("Invalid rating");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      try { 
        menu0.getTimeInterval((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SystemInUtil.addInputLine("Autonomia");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      // Undeclared exception!
      try { 
        menu0.specificCarRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SystemInUtil.addInputLine("Exceptions.InvalidNewRegisterException");
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.parser();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      // Undeclared exception!
      try { 
        menu1.showString("Exceptions.InvalidNewRegisterException");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = "";
      SystemInUtil.addInputLine("");
      // Undeclared exception!
      try { 
        menu0.autonomyCarRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      TimeInterval timeInterval0 = new TimeInterval((LocalDateTime) null, (LocalDateTime) null);
      assertNotNull(timeInterval0);
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu1.rentalHistoryShow(timeInterval0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Top10Clients;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu2);
      assertSame(menu1, menu0);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Top10Clients, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Top10Clients, menu1.getMenu());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Top10Clients, menu2.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "'1Q%sk*.h;Cmr5hux";
      // Undeclared exception!
      try { 
        menu2.simpleCarRent("'1Q%sk*.h;Cmr5hux");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Rentals;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Rentals, menu0.getMenu());
      assertTrue(menu0.getRun());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Rentals, menu1.getMenu());
      
      String string0 = "";
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu1.carOverviewShow("", linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Client;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu0, menu2);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Client, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Client, menu1.getMenu());
      assertEquals(Menu.MenuInd.Client, menu2.getMenu());
      assertFalse(menu2.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu2.top10ClientsShow(linkedList0, "");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Owner;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Owner, menu0.getMenu());
      assertEquals(Menu.MenuInd.Owner, menu1.getMenu());
      assertTrue(menu1.getRun());
      
      String string0 = "o8><t<Di2";
      // Undeclared exception!
      try { 
        menu1.autonomyCarRent("o8><t<Di2");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Login;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu0);
      assertSame(menu2, menu1);
      assertNotNull(menu2);
      assertEquals(Menu.MenuInd.Login, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Login, menu1.getMenu());
      assertFalse(menu1.getRun());
      assertFalse(menu2.getRun());
      assertEquals(Menu.MenuInd.Login, menu2.getMenu());
      
      String string0 = "%d\u00BA";
      String string1 = "MOwAEBropVES5I'X)W4";
      int int0 = 1;
      Menu.MenuInd menu_MenuInd1 = Menu.MenuInd.Owner;
      Menu menu3 = menu0.selectOption(menu_MenuInd1);
      assertFalse(menu_MenuInd1.equals((Object)menu_MenuInd0));
      assertSame(menu0, menu2);
      assertSame(menu0, menu3);
      assertSame(menu0, menu1);
      assertNotSame(menu_MenuInd1, menu_MenuInd0);
      assertSame(menu3, menu1);
      assertSame(menu3, menu0);
      assertSame(menu3, menu2);
      assertNotNull(menu3);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Owner, menu0.getMenu());
      assertFalse(menu3.getRun());
      assertEquals(Menu.MenuInd.Owner, menu3.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu3.carOverviewShow("Registar novo Propriet\u00E1rio", linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      String string0 = menu1.toString();
      assertEquals("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n", string0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(string0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertFalse(menu1.getRun());
      
      // Undeclared exception!
      try { 
        menu1.autonomyCarRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertFalse(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      String string0 = "";
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2, locale_FilteringMode0);
      assertNotNull(list0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList2.contains(string0));
      assertFalse(list0.contains(string0));
      
      linkedList0.addFirst(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, linkedList2.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains(list0));
      assertFalse(linkedList2.contains(string0));
      assertFalse(list0.contains(string0));
      
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("", 0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      String string0 = null;
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu0.top10ClientsShow(linkedList0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Table", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu menu1 = menu0.back();
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertFalse(menu0.getRun());
      assertFalse(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu1.top10ClientsShow(linkedList0, "");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("gas", linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      // Undeclared exception!
      try { 
        menu0.showString("DLW[q1}Z]Occ%");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        menu0.carOverviewShow("hybrid", linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Distance;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Distance, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Distance, menu1.getMenu());
      
      Menu menu2 = menu1.back();
      assertSame(menu0, menu2);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertSame(menu1, menu2);
      assertSame(menu2, menu1);
      assertSame(menu2, menu0);
      assertNotNull(menu2);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertEquals(Menu.MenuInd.Initial, menu1.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Initial, menu2.getMenu());
      assertTrue(menu2.getRun());
      
      // Undeclared exception!
      try { 
        menu2.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      // Undeclared exception!
      try { 
        menu0.specificCarRent(";[a^ t#");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      // Undeclared exception!
      try { 
        menu0.specificCarRent("w");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Pending;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      assertSame(menu0, menu1);
      assertSame(menu1, menu0);
      assertNotNull(menu1);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Pending, menu0.getMenu());
      assertTrue(menu1.getRun());
      assertEquals(Menu.MenuInd.Pending, menu1.getMenu());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        menu0.showRentalRate("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      assertTrue(menu0.getRun());
      
      // Undeclared exception!
      try { 
        menu0.showRentalRate((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Menu menu0 = new Menu();
      assertNotNull(menu0);
      assertTrue(menu0.getRun());
      assertEquals(Menu.MenuInd.Initial, menu0.getMenu());
      
      // Undeclared exception!
      try { 
        menu0.simpleCarRent((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Autonomy;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.simpleCarRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Menu menu0 = new Menu();
      String string0 = "Pre\u00E7o base:";
      // Undeclared exception!
      try { 
        menu0.newRegisterUser("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu menu1 = menu0.back();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Client;
      menu1.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu0.newRegisterUser("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Menu menu0 = new Menu();
      int int0 = 379;
      // Undeclared exception!
      try { 
        menu0.pendingRateShow("", "", (-1048));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Menu menu0 = new Menu();
      String string0 = "";
      // Undeclared exception!
      try { 
        menu0.newLogin((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Menu menu0 = new Menu();
      String string0 = null;
      int int0 = 0;
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>(linkedList0);
      menu0.toString();
      List<String> list0 = null;
      linkedList1.addFirst((List<String>) null);
      // Undeclared exception!
      try { 
        menu0.getTimeInterval((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Menu menu0 = new Menu();
      String string0 = "View.ViewModel.RateOwnerCar";
      // Undeclared exception!
      try { 
        menu0.walkingDistanceRent("View.ViewModel.RateOwnerCar");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Distance;
      menu0.selectOption(menu_MenuInd0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("U", 0, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.pendingRateShow("(", "B", 17);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Autonomy;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.newLogin((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Menu.MenuInd.values();
      Menu menu0 = new Menu();
      Menu menu1 = menu0.back();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Specific;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu2.getTimeInterval("YGbs(Ku-R@J[b&)knM");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Register;
      menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu0.newRegisterCar("(");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Distance;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.newRegisterCar("3");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.walkingDistanceRent("]hos8");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Specific;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      linkedList0.removeFirstOccurrence(menu0);
      // Undeclared exception!
      try { 
        menu1.reviewRentShow(".H^4wEb:Q", 0, linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Menu menu0 = new Menu();
      menu0.getMenu();
      assertTrue(menu0.getRun());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Menu menu0 = new Menu();
      String string0 = "5V";
      SystemInUtil.addInputLine("5V");
      Menu menu1 = menu0.parser();
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "0";
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Register;
      SystemInUtil.addInputLine(",`;6ZNELEowo7t/SHk");
      menu0.selectOption(menu_MenuInd0);
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      menu1.back();
      String string1 = "Registar novo utilizador";
      // Undeclared exception!
      try { 
        menu1.simpleCarRent("Registar novo utilizador");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("\u001B[31m");
      SystemInUtil.addInputLine("v)c*");
      SystemInUtil.addInputLine("v)c*");
      SystemInUtil.addInputLine("o");
      // Undeclared exception!
      try { 
        menu0.newRegisterUser("Email:");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "|";
      SystemInUtil.addInputLine("|");
      Menu menu0 = new Menu();
      Menu menu1 = menu0.parser();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.RegisterOwner;
      menu0.selectOption(menu_MenuInd0);
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      menu2.back();
      // Undeclared exception!
      try { 
        menu0.newRegisterCar("+\n");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "0";
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      Menu menu1 = menu0.parser();
      int int0 = (-11);
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      linkedList0.push(list0);
      // Undeclared exception!
      try { 
        menu1.reviewRentShow("0", (-11), linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SystemInUtil.addInputLine("E");
      Menu menu0 = new Menu();
      String string0 = "  <]^oEDK";
      menu0.toString();
      menu0.showRentalRate(string0);
      menu0.showString(string0);
      menu0.toString();
      String string1 = "0";
      menu0.showRentalRate(string1);
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.RegisterOwner;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      String string2 = null;
      menu0.simpleCarRent(string2);
      menu0.walkingDistanceRent(string0);
      String string3 = "0";
      int int0 = menu0.showRentalRate(string3);
      menu0.newLogin(string0);
      String string4 = null;
      menu0.pendingRateShow(string4, string0, int0);
      String string5 = "-:uxS}ePW";
      menu0.newLogin(string5);
      String string6 = null;
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu0.carOverviewShow(string6, linkedList0);
      String string7 = "Hibrido";
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList1.add((List<String>) linkedList2);
      menu1.carOverviewShow(string7, linkedList1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Menu menu0 = new Menu();
      // Undeclared exception!
      try { 
        menu0.showString("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Rentals;
      SystemInUtil.addInputLine("Q[*h$!i*!xYWX");
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      menu1.parser();
      String string0 = "0";
      // Undeclared exception!
      try { 
        menu0.newRegisterUser("0");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Menu menu0 = new Menu();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) linkedList0;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) linkedList0;
      Object object0 = new Object();
      linkedList0.removeLastOccurrence(object0);
      objectArray0[5] = (Object) linkedList0;
      objectArray0[6] = (Object) menu0;
      objectArray0[7] = (Object) null;
      UnaryOperator<List<String>> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.toArray(objectArray0);
      linkedList0.poll();
      // Undeclared exception!
      try { 
        menu0.rentalHistoryShow((TimeInterval) null, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.Menu", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SystemInUtil.addInputLine("~7EhmOFs)2S:,~");
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Top10Clients;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      Menu menu2 = menu1.parser();
      menu2.selectOption(menu_MenuInd0);
      menu2.back();
      String string0 = ".n:LbH&9J5%P";
      // Undeclared exception!
      try { 
        menu0.specificCarRent(".n:LbH&9J5%P");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      LinkedList<List<String>> linkedList1 = new LinkedList<List<String>>();
      assertEquals(0, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      Menu menu1 = menu0.back();
      String string0 = "DYQ@n+dTH8I";
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.NUses;
      Menu menu2 = menu1.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu2.walkingDistanceRent("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      Menu menu1 = menu0.back();
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      menu1.carOverviewShow("DYQ@n+dTH8I", linkedList0);
      SystemInUtil.addInputLine("0");
      menu0.top10ClientsShow(linkedList0, "DYQ@n+dTH8I");
      String string0 = "C nv0<!=Ht\"<NoY";
      // Undeclared exception!
      try { 
        menu0.reviewRentShow("", (-5821), linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      menu0.pendingRateShow("0", "(s[", 521);
      // Undeclared exception!
      try { 
        menu0.simpleCarRent("(s[");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      menu0.pendingRateShow("0", "!s'", 521);
      // Undeclared exception!
      try { 
        menu0.simpleCarRent("!s'");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<List<String>> linkedList0 = new LinkedList<List<String>>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Owner;
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "0";
      SystemInUtil.addInputLine("0");
      Menu menu0 = new Menu();
      Menu.MenuInd menu_MenuInd0 = Menu.MenuInd.Register;
      SystemInUtil.addInputLine(",`;6ZNELEowo7t/SHk");
      menu0.parser();
      Menu menu1 = menu0.selectOption(menu_MenuInd0);
      // Undeclared exception!
      try { 
        menu1.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SystemInUtil.addInputLine("{jFbX");
      SystemInUtil.addInputLine("Registar novo utilizador");
      Menu menu0 = new Menu();
      Menu menu1 = menu0.back();
      SystemInUtil.addInputLine("{jFbX");
      menu0.getRun();
      menu1.back();
      // Undeclared exception!
      try { 
        menu1.simpleCarRent("Registar novo utilizador");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Menu menu0 = new Menu();
      String string0 = null;
      SystemInUtil.addInputLine((String) null);
      // Undeclared exception!
      try { 
        menu0.getTimeInterval((String) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Menu menu0 = new Menu();
      SystemInUtil.addInputLine("FAY$[:>g");
      String string0 = "])koi5.";
      // Undeclared exception!
      try { 
        menu0.autonomyCarRent("rfO/)");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Menu menu0 = new Menu();
      menu0.toString();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      SystemInUtil.addInputLine("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      menu0.newLogin("\u001Bc\u001B[31m\t--Initial--\n\u001B[0m\n\n1- Login\n2- Registar novo utilizador\n");
      menu0.getMenu();
      // Undeclared exception!
      try { 
        menu0.parser();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No line found
         //
         verifyException("java.util.Scanner", e);
      }
  }
}
