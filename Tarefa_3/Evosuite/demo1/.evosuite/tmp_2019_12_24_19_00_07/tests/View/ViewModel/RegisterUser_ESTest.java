/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:22:56 GMT 2019
 */

package View.ViewModel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import Utils.Point;
import View.ViewModel.RegisterUser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RegisterUser_ESTest extends RegisterUser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(point0).toString();
      RegisterUser registerUser0 = new RegisterUser("+}:FI", "View.ViewModel.RegisterUser", "+}:FI", (String) null, (-487), point0);
      registerUser0.getPos();
      assertEquals("+}:FI", registerUser0.getPasswd());
      assertEquals("+}:FI", registerUser0.getName());
      assertEquals((-487), registerUser0.getNif());
      assertEquals("View.ViewModel.RegisterUser", registerUser0.getEmail());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      RegisterUser registerUser0 = new RegisterUser((String) null, ", ", (String) null, (String) null, 1500, point0);
      String string0 = registerUser0.getPasswd();
      assertNull(string0);
      assertEquals(1500, registerUser0.getNif());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("HP@n%'vOe>_eZy", "HP@n%'vOe>_eZy", "HP@n%'vOe>_eZy", "%.2f", 0, (Point) null);
      String string0 = registerUser0.getPasswd();
      assertEquals(0, registerUser0.getNif());
      assertEquals("%.2f", registerUser0.getAddress());
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getEmail());
      assertEquals("HP@n%'vOe>_eZy", string0);
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("HP@n%'vOe>_eZy", "HP@n%'vOe>_eZy", "HP@n%'vOe>_eZy", "%.2f", 0, (Point) null);
      int int0 = registerUser0.getNif();
      assertEquals(0, int0);
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getEmail());
      assertEquals("%.2f", registerUser0.getAddress());
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getPasswd());
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      RegisterUser registerUser0 = new RegisterUser((String) null, ", ", (String) null, (String) null, 1500, point0);
      int int0 = registerUser0.getNif();
      assertEquals(1500, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      RegisterUser registerUser0 = new RegisterUser("+}:FI", "View.ViewModel.RegisterUser", "+}:FI", (String) null, (-487), point0);
      String string0 = registerUser0.getName();
      assertEquals("+}:FI", registerUser0.getPasswd());
      assertEquals("View.ViewModel.RegisterUser", registerUser0.getEmail());
      assertEquals((-487), registerUser0.getNif());
      assertEquals("+}:FI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("", "", "", "", (-3450));
      registerUser0.getName();
      assertEquals((-3450), registerUser0.getNif());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      RegisterUser registerUser0 = new RegisterUser((String) null, (String) null, (String) null, "", 0, point0);
      String string0 = registerUser0.getEmail();
      assertEquals(0, registerUser0.getNif());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      RegisterUser registerUser0 = new RegisterUser("+}:FI", "View.ViewModel.RegisterUser", "+}:FI", (String) null, (-487), point0);
      String string0 = registerUser0.getEmail();
      assertEquals("+}:FI", registerUser0.getName());
      assertEquals((-487), registerUser0.getNif());
      assertNotNull(string0);
      assertEquals("View.ViewModel.RegisterUser", string0);
      assertEquals("+}:FI", registerUser0.getPasswd());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      RegisterUser registerUser0 = new RegisterUser("+}:FI", "View.ViewModel.RegisterUser", "+}:FI", (String) null, (-487), point0);
      String string0 = registerUser0.getAddress();
      assertNull(string0);
      assertEquals("+}:FI", registerUser0.getPasswd());
      assertEquals((-487), registerUser0.getNif());
      assertEquals("View.ViewModel.RegisterUser", registerUser0.getEmail());
      assertEquals("+}:FI", registerUser0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("HP@n%'vOe>_eZy", "HP@n%'vOe>_eZy", "HP@n%'vOe>_eZy", "%.2f", 0, (Point) null);
      String string0 = registerUser0.getAddress();
      assertEquals("%.2f", string0);
      assertEquals(0, registerUser0.getNif());
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getName());
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getPasswd());
      assertEquals("HP@n%'vOe>_eZy", registerUser0.getEmail());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      RegisterUser registerUser0 = new RegisterUser((String) null, (String) null, (String) null, "", 0, point0);
      String string0 = registerUser0.getName();
      assertEquals(0, registerUser0.getNif());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("%.2f", "", "g(tT-jP`Q*E4", "", (-305));
      int int0 = registerUser0.getNif();
      assertEquals("g(tT-jP`Q*E4", registerUser0.getPasswd());
      assertEquals("", registerUser0.getEmail());
      assertEquals("%.2f", registerUser0.getName());
      assertEquals("", registerUser0.getAddress());
      assertEquals((-305), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("", "", "", "", (-3450));
      registerUser0.getEmail();
      assertEquals((-3450), registerUser0.getNif());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("", "", "", "", (-3450));
      registerUser0.getPasswd();
      assertEquals((-3450), registerUser0.getNif());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("", "", "", "", (-3450));
      registerUser0.getPos();
      assertEquals((-3450), registerUser0.getNif());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegisterUser registerUser0 = new RegisterUser("", "", "", "", (-3450));
      registerUser0.getAddress();
      assertEquals((-3450), registerUser0.getNif());
  }
}
