/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:23:59 GMT 2019
 */

package View.ViewModel;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Utils.Point;
import View.ViewModel.CheapestNearCar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheapestNearCar_ESTest extends CheapestNearCar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      CheapestNearCar cheapestNearCar0 = new CheapestNearCar(point0, 0, "electric");
      int int0 = cheapestNearCar0.getWalkDistance();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      CheapestNearCar cheapestNearCar0 = new CheapestNearCar(point0, (-1566), "electric");
      int int0 = cheapestNearCar0.getWalkDistance();
      assertEquals((-1566), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CheapestNearCar cheapestNearCar0 = new CheapestNearCar((Point) null, 1992, "gas");
      cheapestNearCar0.getPoint();
      assertEquals(1992, cheapestNearCar0.getWalkDistance());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      CheapestNearCar cheapestNearCar0 = null;
      try {
        cheapestNearCar0 = new CheapestNearCar(point0, 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.ViewModel.CheapestNearCar", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      doReturn("any").when(point0).toString();
      CheapestNearCar cheapestNearCar0 = new CheapestNearCar(point0, 40, "any");
      cheapestNearCar0.getPoint();
      assertEquals(40, cheapestNearCar0.getWalkDistance());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      CheapestNearCar cheapestNearCar0 = new CheapestNearCar(point0, 40, "any");
      cheapestNearCar0.getType();
      assertEquals(40, cheapestNearCar0.getWalkDistance());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      CheapestNearCar cheapestNearCar0 = new CheapestNearCar(point0, 40, "any");
      int int0 = cheapestNearCar0.getWalkDistance();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Point point0 = mock(Point.class, new ViolatedAssumptionAnswer());
      CheapestNearCar cheapestNearCar0 = null;
      try {
        cheapestNearCar0 = new CheapestNearCar(point0, 0, "%,");
        fail("Expecting exception: Throwable");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("View.ViewModel.CheapestNearCar", e);
      }
  }
}
