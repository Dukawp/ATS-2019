/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:15:12 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Utils.Point;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Client_ESTest extends Client_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Double double0 = new Double(1355.06653);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "#%?tdx`wcLZZ\t", "#%?tdx`wcLZZ\t", "", "", (-1254));
      Owner owner0 = new Owner("", "", "Model.Client", (-1254), "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Car car0 = new Car("#%?tdx`wcLZZ\t", owner0, car_CarType0, 1355.06653, 1355.06653, (-1254), (-1), point0, "");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.rate(rental0, 0, 0);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", (-1585));
      Point point1 = client0.getPos();
      assertNotSame(point0, point1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double((-2684.77030712));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "Viagem:         ", "Viagem:         ", "", 0);
      Owner owner0 = new Owner("", "", "", 228, "_7Z1>1@&ntRx-:68{");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-39.9454), 0, (-39.9454), 228, point0, "R@AU");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      List<Rental> list0 = client0.getPendingRates();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double double0 = new Double(1355.06653);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "#%?tdx`wcLZZ\t", "#%?tdx`wcLZZ\t", "", "", (-1254));
      client0.rate(0);
      Client client1 = client0.clone();
      assertNotSame(client0, client1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Double double0 = new Double(1221.1531431);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "s=AnEJE ", "", "", "s=AnEJE ", 4370);
      client0.rate((-2044));
      Client client1 = client0.clone();
      assertEquals((-2044), client1.getRates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Client client0 = new Client((Point) null, "", "$VALUES", "", "dcCSDyc%k%(", (-1027));
      // Undeclared exception!
      try { 
        client0.getPos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", (-1585));
      Client client1 = client0.clone();
      client0.setPos((Point) null);
      // Undeclared exception!
      try { 
        client0.equals(client1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Client client0 = new Client((Point) null, "eYka1d%oal", "fG'':6JC.Oq", "fG'':6JC.Oq", "x*HE9t^", 2267);
      // Undeclared exception!
      try { 
        client0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Client", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "`}En$|~=r/;M*Jk", "", "OcJGh", (-1585));
      Client client1 = client0.clone();
      assertFalse(client1.equals((Object)client0));
      
      client1.setPos(point0);
      boolean boolean0 = client0.equals(client1);
      assertTrue(client1.equals((Object)client0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "@1eyh|Sc7m *oijR", "@1eyh|Sc7m *oijR", "@1eyh|Sc7m *oijR", "@1eyh|Sc7m *oijR", (-1585));
      Client client1 = client0.clone();
      boolean boolean0 = client0.equals(client1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Double double0 = new Double(759.894681631794);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "/bY,gTcD+}ul&", "?f#j0j*S1f&>.]", "", "/bY,gTcD+}ul&", 0);
      boolean boolean0 = client0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(559.4897);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "Tempo Estimado: ", "Tempo Estimado: ", "j|>U]}#2s*H)(i0", "", (-1401));
      boolean boolean0 = client0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = new Double((-2684.77030712));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "Viagem:         ", "Viagem:         ", "", 0);
      boolean boolean0 = client0.equals(client0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Double double0 = new Double((-2684.77030712));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "Viagem:         ", "Viagem:         ", "", 0);
      Owner owner0 = new Owner("", "", "", 228, "_7Z1>1@&ntRx-:68{");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-39.9454), 0, (-39.9454), 228, point0, "R@AU");
      Rental rental0 = new Rental(car0, client0, point0);
      client0.addPendingRental(rental0);
      Client client1 = new Client(point0, "", "R@AU", "", "", 228);
      boolean boolean0 = client0.equals(client1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Double double0 = new Double((-2684.7703));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "", "", 0);
      List<Rental> list0 = client0.getPendingRates();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Double double0 = new Double(759.894681631794);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "/bY,gTcD+}ul&", "?f#j0j*S1f&>.]", "", "/bY,gTcD+}ul&", 0);
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("a<PevIJ4Y==2Hj/", (Owner) null, car_CarType0, 0, (-1619.0), 1505.23807929329, (-82), point0, "a<PevIJ4Y==2Hj/");
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        client0.rate(rental0, (-1), 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }
}
