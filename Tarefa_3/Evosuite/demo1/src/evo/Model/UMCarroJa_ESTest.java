/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:17:40 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Model.UMCarroJa;
import Model.User;
import Utils.Point;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UMCarroJa_ESTest extends UMCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "@gmail.com", "Utils.Point", 0, "");
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0, 0, zoneOffset0);
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0, (LocalDateTime) null, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      try { 
        uMCarroJa0.addCar("", "Hibrido", car_CarType0, 678.491, (double) 1649, 0.0, 1649, (Point) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("D;bf\"Rg0A", "D;bf\"Rg0A", "", 2443, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, 2443, 0.0, (-1), point0, "D;bf\"Rg0A");
      owner0.addCar(car0);
      uMCarroJa0.setBasePrice(owner0, 0, (-2601.800018));
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, (String) null, "", 1862, "krq*V}*?EY&\"O\"s@O");
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("MaisPerto", owner0, car_CarType0, 1862, (-1.0), 0.0, 1862, (Point) null, (String) null);
      owner0.addCar(car0);
      uMCarroJa0.refil(owner0, 0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, "(L_ibb", (String) null, 13);
      Owner owner0 = new Owner("MaisPerto", "(L_ibb", (String) null, 13, "@x%co9(snf%|;");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car car0 = new Car("?4En~}qjM.{5.m5", owner0, car_CarType0, 0.0, 0.0, (-15.919442215), 13, point0, "L-54Whv?V");
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(client0, rental0, 13, 0);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double((-1976));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "o>_xL$}", "", "h", "@T8xy", (-1));
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0, localDateTime0, localDateTime0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(650.7);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "#}kAk<H%V**B;%6%", "8}_;`@rY2vS;~x#&N?u", "IYJKe", 323);
      List<Rental> list0 = uMCarroJa0.getRentalListClient(client0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = Double.valueOf((-1.0));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", ",49/^\"Fccw", "", "", 3);
      uMCarroJa0.addUser(client0);
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = Double.valueOf((-1.0));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", ",49/^\"Fccw", "", "", 3);
      uMCarroJa0.addUser(client0);
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState((Owner) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Tempo Total: ", (String) null, (String) null, 0, "7[$eX'fG<Cwpf!EcR");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, (-4256));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice((Owner) null, (-1105), (-1105));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 1572, "");
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, 1572, 1572);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1572, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("Dono:           ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.save("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Client client0 = new Client((Point) null, "|(k}=$D!.", "", "|(k}=$D!.", "gas", (-1522788922));
      try { 
        uMCarroJa0.rental((Point) null, "|(k}=$D!.", client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-2321));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "\n", "UynA\")F{l 34$AH1^", "kX?:-pq", "$", (-3136));
      // Undeclared exception!
      try { 
        uMCarroJa0.rental(client0, point0, (String) null, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-699.4982469292581));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "ThZ%qs6?OYSs}EU4(", "$", "(", "hybrid", 0);
      try { 
        uMCarroJa0.rental(client0, point0, 0.0, car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.refil((Owner) null, (-929));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("'Qg&gSskZ-86kX", "", "", (-2016), "Model.Cars");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, (-2016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        UMCarroJa.read((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, "@gmail.com", "u`LU*n#a}1mP", 669, "JCCM?r@|.]zC:WWNk3");
      // Undeclared exception!
      try { 
        uMCarroJa0.rate(owner0, (Rental) null, 669);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.logIn((String) null, "2io'B7-9*HhewM");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getTotalBilledCar((Car) null, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListOwner((Owner) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.addUser((User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Owner owner0 = new Owner("MaisPerto", "(L_ibb", (String) null, 13, "@x%co9(snf%|;");
      Car.CarType car_CarType0 = Car.CarType.gas;
      try { 
        uMCarroJa0.addCar(owner0, "Model.UMCarroJa", car_CarType0, 1691.51702, 4.0, 2746.0, 13, point0, "C:YbkB*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("X_", "X_", "R_!B+NO+kM^I@rl(", 0, "R_!B+NO+kM^I@rl(");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-645.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("X_", owner0, car_CarType0, 1527.4792, 0, 2.0, 80982221, point0, "$Ny+8;G`bOwv:");
      Client client0 = new Client(point0, "%.2f", "X_", "%.2f", (String) null, 1290);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.refuse(owner0, rental0);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("&0d", "", "Utils.Point", 2868, "&0d");
      List<Rental> list0 = uMCarroJa0.getRentalListOwner(owner0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.rate((Client) null, (Rental) null, 1176, 1176);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("Model.UMCarroJa", "Model.UMCarroJa", "", 100, "Model.UMCarroJa");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(2399.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 100, 100, 0.0, 0, point0, "");
      Client client0 = new Client(point0, "", "Model.UMCarroJa", "", "<io  W8", 2086);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rent(rental0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner((String) null, (String) null, (String) null, (-2252), "Qa#SG*=EMv");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-595.117446));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-595.117446), (-595.117446), (-2252), (-2252), point0, "Qa#SG*=EMv");
      double double1 = uMCarroJa0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "", "", 0, ";");
      // Undeclared exception!
      try { 
        uMCarroJa0.refil(owner0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "@gmail.com", "Utils.Point", 0, "");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(1791.2928663095);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("@gmail.com", owner0, car_CarType0, 0, (-907.39797463), (-907.39797463), 0, point0, "");
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond(0, 0, zoneOffset0);
      double double1 = uMCarroJa0.getTotalBilledCar(car0, localDateTime0, localDateTime0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClients();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-595.117446));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, (String) null, (String) null, "", 0);
      try { 
        uMCarroJa0.rental(point0, 0.0, car_CarType0, client0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = Double.valueOf((-1.0));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", ",49/^\"Fccw", "", "", 3);
      uMCarroJa0.addUser(client0);
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar("", "", car_CarType0, (-1.0), 1324.987044525398, (-320.9128045407996), 3, point0, "@gmail.com");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Model.Client cannot be cast to Model.Owner
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.save((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      try { 
        uMCarroJa0.rate("", 4);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Double>> list0 = (List<Map.Entry<String, Double>>)uMCarroJa0.getBestClientsTravel();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.any;
      try { 
        uMCarroJa0.rental("@gmail.com", (Point) null, "@gmail.com", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Users", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("", "Fall", "Fall", 0, "");
      // Undeclared exception!
      try { 
        uMCarroJa0.swapState(owner0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(1791.2928663095);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", (String) null, "nw!z.No(48", "Utils.Point", (-471));
      try { 
        uMCarroJa0.rental(client0, point0, "XB5*Bd6J{wH^?FQ6", car_CarType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Cars", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      // Undeclared exception!
      try { 
        uMCarroJa0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("_", "_", "electric", (-1), "");
      // Undeclared exception!
      try { 
        uMCarroJa0.setBasePrice(owner0, (-1), 642.2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      List<Map.Entry<String, Integer>> list0 = (List<Map.Entry<String, Integer>>)uMCarroJa0.getBestClientsTimes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      try { 
        UMCarroJa.read("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      // Undeclared exception!
      try { 
        uMCarroJa0.addCar((Owner) null, "@gmail.co-,m", car_CarType0, (-4738.812766), 0.0, 0.0, 0, (Point) null, "CeH?}d{M)$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Double double0 = new Double(44);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.gas;
      // Undeclared exception!
      try { 
        uMCarroJa0.rental((Client) null, point0, (double) 0, car_CarType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.UMCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UMCarroJa uMCarroJa0 = new UMCarroJa();
      Owner owner0 = new Owner("&0d", "", "Utils.Point", 2868, "&0d");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 2868, 2868, (-1.0), 0, point0, "");
      Client client0 = new Client(point0, (String) null, "2_", "Zl[MQ>$yFY-.+&YOd$[", "", 826);
      Rental rental0 = new Rental(car0, client0, point0);
      uMCarroJa0.rate(owner0, rental0, 0);
      assertEquals(0, client0.getRates());
  }
}
