/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:50:54 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Proprietario_ESTest extends Proprietario_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      proprietario0.setDataNasc((GregorianCalendar) null);
      // Undeclared exception!
      try { 
        proprietario0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(835, 835, 835, 1449, 1449, 1449);
      proprietario0.setDataNasc(mockGregorianCalendar0);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        proprietario0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      proprietario0.setNIF((String) null);
      Proprietario proprietario1 = proprietario0.clone();
      // Undeclared exception!
      try { 
        proprietario0.equals(proprietario1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Proprietario proprietario0 = null;
      try {
        proprietario0 = new Proprietario((Proprietario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      Proprietario proprietario1 = new Proprietario(proprietario0);
      assertEquals("", proprietario1.getPassword());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      Proprietario proprietario1 = proprietario0.clone();
      boolean boolean0 = proprietario1.equals(proprietario0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      boolean boolean0 = proprietario0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      boolean boolean0 = proprietario0.equals(proprietario0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      Object object0 = new Object();
      boolean boolean0 = proprietario0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Proprietario proprietario0 = new Proprietario();
      String string0 = proprietario0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\n", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Proprietario proprietario0 = new Proprietario("pWkc+Y1~qM:+L", "pWkc+Y1~qM:+L", "pWkc+Y1~qM:+L", "pWkc+Y1~qM:+L", "pWkc+Y1~qM:+L", mockGregorianCalendar0);
      Proprietario proprietario1 = proprietario0.clone();
      assertNotSame(proprietario1, proprietario0);
  }
}
