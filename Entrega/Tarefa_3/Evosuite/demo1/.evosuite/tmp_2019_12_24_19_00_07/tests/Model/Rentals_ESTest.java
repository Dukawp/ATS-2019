/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:17:11 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Model.Rentals;
import Utils.Point;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Rentals_ESTest extends Rentals_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("K#", "K#", "K#", (-3986), "K#");
      Period period0 = Period.of(0, 0, 1);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(0L);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0, localDateTime0, (LocalDateTime) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double((-3223.1742046601));
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "r~", "r~", "Custo Total: ", 0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.ofEpochSecond((-3498L), 0, zoneOffset0);
      LocalDateTime localDateTime1 = MockLocalDateTime.now((ZoneId) zoneOffset0);
      List<Rental> list0 = rentals0.getRentalListClient(client0, localDateTime0, localDateTime1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "iR^UBvh", (-1417), "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-1417));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1417), (-1417), (-1417), (-1417), point0, "iR^UBvh");
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(1);
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      double double1 = rentals0.getTotalBilledCar(car0, (LocalDateTime) null, localDateTime0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", (String) null, 0, "s'Xr");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-2799.787787951));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-2101.0552968977), (-2101.0552968977), (-2101.0552968977), 0, point0, (String) null);
      Client client0 = new Client(point0, "s'Xr", "", "|$~FY'95HW", (String) null, 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      rentals0.addRental(rental0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("XUjiT)9}0S_D {^n_u", "\u001B[?25l", "XUjiT)9}0S_D {^n_u", (-1567), "XUjiT)9}0S_D {^n_u");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = Double.valueOf((-3390.498265978199));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("XUjiT)9}0S_D {^n_u", owner0, car_CarType0, (-3390.498265978199), (-3390.498265978199), 1209.21794, 3944, point0, "\u001B[?25l");
      Client client0 = new Client(point0, "XUjiT)9}0S_D {^n_u", "XUjiT)9}0S_D {^n_u", "XUjiT)9}0S_D {^n_u", "\u001B[?25l", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertTrue(list0.contains(rental0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner((String) null, "", "", 0, (String) null);
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0.0, 0.5, 0, point0, "/bbT[y|YNkB&Z9;fr");
      Client client0 = new Client(point0, "", "SzDlKXXaDx<<!}/@", "", "`?`b!OC*x", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient("");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("FgP=ko<daP(0Sl", " Z/l\u0006irFo@by", " Z/l\u0006irFo@by", 1, "FgP=ko<daP(0Sl");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(" Z/l\u0006irFo@by", owner0, car_CarType0, 1, 1, 1, 116, point0, " Z/l\u0006irFo@by");
      Client client0 = new Client(point0, "FgP=ko<daP(0Sl", "", "FgP=ko<daP(0Sl", "FgP=ko<daP(0Sl", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "y", 0, "any");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(754.43294884);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, 0, (-1358.9993874464512), 0, 0, point0, "");
      rentals0.addRental((Rental) null);
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar(car0, (LocalDateTime) null, (LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getTotalBilledCar((Car) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDateTime localDateTime0 = MockLocalDateTime.now(zoneId0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner((Owner) null, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner((String) null, "", "", 0, (String) null);
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0.0, 0.5, 0, point0, "/bbT[y|YNkB&Z9;fr");
      Client client0 = new Client(point0, "", "SzDlKXXaDx<<!}/@", "", "`?`b!OC*x", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListOwner(owner0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("", "", "L+e[}@iwg8,jb\"", 100, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = Double.valueOf((double) 100);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Dono:           ", owner0, car_CarType0, 100, 816.893, 816.893, 100, point0, "");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("N |a*ih5t3_;4", "roaygpm1CT", "N |a*ih5t3_;4", 0, "roaygpm1CT");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, (String) null, "g", (String) null, "g", 0);
      Car car0 = new Car("N |a*ih5t3_;4", owner0, car_CarType0, 0, 0, 0, 0, point0, "g");
      Rental rental0 = new Rental(car0, client0, point0);
      LocalDateTime localDateTime0 = rental0.getDate();
      rentals0.addRental(rental0);
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient(client0, localDateTime0, localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      // Undeclared exception!
      try { 
        rentals0.getRentalListClient((Client) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rentals", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Rentals rentals1 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      boolean boolean0 = rentals0.equals(rentals0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("N |a*ih5t3_;4", "roaygpm1CT", "N |a*ih5t3_;4", 0, "roaygpm1CT");
      boolean boolean0 = rentals0.equals(owner0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Double double0 = new Double(1.0);
      Point point0 = new Point(double0, double0);
      Client client0 = new Client(point0, "", "", "z$x[a:/j7J&~", "", 5419);
      List<Rental> list0 = rentals0.getRentalListClient(client0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      List<Rental> list0 = rentals0.getRentalListClient("");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("N |a*ih5t3_;4", "roaygpm1CT", "N |a*ih5t3_;4", 0, "roaygpm1CT");
      List<Rental> list0 = rentals0.getRentalListOwner(owner0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Rentals rentals0 = new Rentals();
      Owner owner0 = new Owner("N |a*ih5t3_;4", "roaygpm1CT", "N |a*ih5t3_;4", 0, "roaygpm1CT");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("N |a*ih5t3_;4", owner0, car_CarType0, 0, 0, 0, 0, point0, "g");
      double double1 = rentals0.getTotalBilledCar(car0);
      assertEquals(0.0, double1, 0.01);
  }
}
