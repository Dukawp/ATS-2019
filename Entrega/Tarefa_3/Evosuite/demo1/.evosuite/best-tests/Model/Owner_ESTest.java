/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:14:54 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Utils.Point;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Owner_ESTest extends Owner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Owner owner0 = new Owner("&|IU`5c@[sMa18qQ", "R", "", 0, "&|IU`5c@[sMa18qQ");
      owner0.refuse((Rental) null);
      assertEquals(100, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Owner owner0 = new Owner(", ", ", ", "Tempo a p\u00E9      ", (-3374), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("cmn", owner0, car_CarType0, (-3374), (-3374), (-3374), 0, point0, ", ");
      Client client0 = new Client(point0, "A|o-F*", "Utils.Point", ", ", "", 0);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.rate(rental0, (-3374));
      assertEquals((-3374), client0.getRates());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Owner owner0 = new Owner("", "t>y", "t>y", (-1099), "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1099));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1099), 1.0, (-1098.469), 1110, point0, "%.2f");
      Client client0 = new Client(point0, "%.2f", "gas", "", "", 1110);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      ArrayList<Rental> arrayList0 = owner0.getPending();
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("", "Model.Owner", "", 355, "");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-2693.858428972));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 355, 0.0, 0.4, (-1), point0, "");
      owner0.addCar(car0);
      List<Car> list0 = owner0.getCars();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("&|IU`5c@[sMa18qQ", "R", "", 0, "&|IU`5c@[sMa18qQ");
      owner0.rate(0);
      Owner owner1 = owner0.clone();
      assertEquals(0, owner1.getRates());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("", "CZItMM]", "<{79J=gh';{", (-2683), "<{79J=gh';{");
      owner0.rate((-2683));
      Owner owner1 = owner0.clone();
      assertTrue(owner1.equals((Object)owner0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("cfk[sF&Src~P>", "2P}V5gAFNkz3Eh]qfC", "cfk[sF&Src~P>", 2391, "2P}V5gAFNkz3Eh]qfC");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-571.76562399917));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("S]TW8e*_&*", owner0, car_CarType0, 2436, (-1.0), 2836.6766936635, 2436, point0, "S]TW8e*_&*");
      Client client0 = new Client(point0, "%Ld", "cfk[sF&Src~P>", "2P}V5gAFNkz3Eh]qfC", "2P}V5gAFNkz3Eh]qfC", 1);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      Rental rental1 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        owner0.refuse(rental1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2683), "");
      Owner owner1 = owner0.clone();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-2683));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 779.258, (-1577.6139823), 0.0, 762, point0, "");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      owner0.addPendingRental(rental0);
      Client client0 = new Client(point0, "", "", "", "", (-2683));
      Rental rental1 = new Rental(car0, client0, point0);
      owner1.addPendingRental(rental1);
      // Undeclared exception!
      try { 
        owner0.equals(owner1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("C7L8a|YMZ3=", "", "", (-706), "rt}");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(120.771);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("rt}", owner0, car_CarType0, (-706), 3390.0344700901, (-1.0), 1, point0, "");
      Client client0 = new Client(point0, (String) null, "!~", "h<T-lIR$R;Ft1=", "", 191);
      Rental rental0 = new Rental(car0, client0, point0);
      owner0.addPendingRental(rental0);
      // Undeclared exception!
      try { 
        owner0.accept((Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Owner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("", "CZItMM]", "<{79J=gh';{", (-2683), "<{79J=gh';{");
      List<Car> list0 = owner0.getCars();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Owner owner0 = new Owner(",P\"qTXy?x?a", ",P\"qTXy?x?a", ",P\"qTXy?x?a", 34, ",P\"qTXy?x?a");
      Owner owner1 = owner0.clone();
      boolean boolean0 = owner0.equals(owner1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("", "CZItMM]", "<{79J=gh';{", (-2683), "<{79J=gh';{");
      Owner owner1 = owner0.clone();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Ra[{,y4d{&", owner1, car_CarType0, (-2213.734410672), (-2213.734410672), 0.0, (-2683), point0, "K[=:/K15X -[v");
      Client client0 = new Client(point0, "V$]&yxKkWt$Jxe57!", "Model.Owner", "<{79J=gh';{", "7s6F/&ms(,(zK", (-2683));
      Rental rental0 = new Rental(car0, client0, point0);
      assertTrue(owner1.equals((Object)owner0));
      
      owner1.addPendingRental(rental0);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(owner1.equals((Object)owner0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Owner owner0 = new Owner("=(^E{Tx2", "=(^E{Tx2", "", 1, "");
      Owner owner1 = owner0.clone();
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(1);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0.0, 1.0, 1, 1, point0, "VM>1a@%8y,");
      owner0.addCar(car0);
      boolean boolean0 = owner1.equals(owner0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner("", "", "b/<Dz-t", 0, "");
      boolean boolean0 = owner0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner("GasolJia", "GasolJia", "GasolJia", 1473121965, "GasolJia");
      boolean boolean0 = owner0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", (-2683), "");
      boolean boolean0 = owner0.equals(owner0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 3, "");
      Owner owner1 = owner0.clone();
      assertTrue(owner1.equals((Object)owner0));
      
      owner1.accept((Rental) null);
      boolean boolean0 = owner0.equals(owner1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("", "", "b/<Dz-t", 0, "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-1241.53267));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, (-1241.53267), (-1241.53267), 0, point0, "RS:|IueD{,WHmd3Fedr");
      Rental rental0 = new Rental(car0, (Client) null, point0);
      // Undeclared exception!
      try { 
        owner0.rate(rental0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Rental", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner("C7L8a|YMZ3=", "", "", (-706), "rt}");
      ArrayList<Rental> arrayList0 = owner0.getPending();
      assertEquals(0, arrayList0.size());
  }
}
