/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 24 19:06:37 GMT 2019
 */

package Model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Model.Car;
import Model.Client;
import Model.Owner;
import Model.Rental;
import Utils.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Car_ESTest extends Car_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("(uw[|(|", "(uw[|(|", "(uw[|(|", 0, "D}/Cp");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("(uw[|(|", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      car0.rate(0);
      Car car1 = new Car("(uw[|(|", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
      assertFalse(car1.equals((Object)car0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-253));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.2, 0.2, 0.2, (-253), point0, "");
      Car car1 = car0.clone();
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("XJi}m/GBC#HbGR", "XJi}m/GBC#HbGR", "<Kp", 0, "D}/Cp");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("$VALUES", owner0, car_CarType0, 0, 0, 0, (-2819), point0, "]mz7##.");
      Car car1 = new Car("XJi}m/GBC#HbGR", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Owner owner0 = new Owner("Dono:           ", "Viagem:         ", "Viagem:         ", (-1764), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1764));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-1764), (-1764), (-1764), (-1522788922), point0, "");
      Car car1 = new Car("2014-02-14 20:21\nViagem:         \nDono:           \n(-1764.00, -1764.85)\n(-1764.00, -1764.85)\n0.00", owner0, car_CarType0, (-1764), 104.0, (-1764), (-1522788922), (Point) null, "2014-02-14 20:21\nViagem:         \nDono:           \n(-1764.00, -1764.85)\n(-1764.00, -1764.85)\n0.00");
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Owner owner0 = new Owner("", "j'fC6&W`yjZ% M)", "", 160053006, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1967.2));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, (-1.522788914E9), 1.2, 1764.0, 463, point0, "j'fC6&W`yjZ% M)");
      Car car1 = new Car("", owner0, car_CarType0, 463, (-718.39), 1764.0, 160053006, point0, "\n463.00\n1.20\ntrue\n100");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Owner owner0 = new Owner("", "", "hybrid", 0, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0.0, 0.0, 0, point0, "");
      car0.rate((-396), (-298));
      assertEquals((-298), owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Owner owner0 = new Owner("", "lK", "lK", (-2403), "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("%SY6", owner0, car_CarType0, 1775.6357, (-2403), 1775.6357, 0, point0, "");
      boolean boolean0 = car0.hasRange(point0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Owner owner0 = new Owner("?<WDXqh3 6[b-", "?<WDXqh3 6[b-", "?<WDXqh3 6[b-", 4116, "");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(4116);
      Double double1 = new Double((-2379.8));
      Point point0 = new Point(double0, double1);
      Car car0 = new Car("?<WDXqh3 6[b-", owner0, car_CarType0, 4116, 4116, 4116, 655305595, point0, "");
      Point point1 = new Point(double1, double0);
      boolean boolean0 = car0.hasRange(point1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Owner owner0 = new Owner("KjN7oTw`lX", "", "yyyy-MM-dd HH:mm", (-398), "Dv{>");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-2558.417321225));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("KjN7oTw`lX", owner0, car_CarType0, (-398), 0.0, 0.0, (-2227), point0, (String) null);
      car0.rate((-2227));
      car0.rate((-2227));
      String string0 = car0.toString();
      assertEquals("KjN7oTw`lX\n-2227.00\n0.00\ntrue\n-2227", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Owner owner0 = new Owner("Gasolina", "`wj", "Gasolina", (-495), "`wj");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(0.4);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Gasolina", owner0, car_CarType0, (-683.797451730277), 0.4, 4.0, (-495), point0, "Gasolina");
      Client client0 = new Client(point0, "Ux", "Ux", "Carro:          ", "electric", (-495));
      Rental rental0 = new Rental(car0, client0, point0);
      car0.pendingRental(rental0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-253));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.2, 0.2, 0.2, (-253), point0, "");
      boolean boolean0 = car0.isAvailable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Owner owner0 = new Owner("", "Model.Rental", "Todos", 100, " -> ");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(2831.125923);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car(" -> ", owner0, car_CarType0, 2831.125923, (-1795.29), 2831.125923, 0, point0, " -> ");
      car0.swapState();
      boolean boolean0 = car0.isAvailable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(2400);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 1131.6466734796877, 1131.6466734796877, 1131.6466734796877, 2400, point0, "");
      Car.CarType car_CarType1 = car0.getType();
      assertSame(car_CarType0, car_CarType1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Owner owner0 = new Owner(",s*0};sNjeLk<{4Rj,V", "", "", 0, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Car car0 = new Car(",s*0};sNjeLk<{4Rj,V", owner0, car_CarType0, 4.0, 1615.78374374, (-1445.3), 0, (Point) null, "");
      double double0 = car0.getRange();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "('}xn;HJ.?Sd12sF", (String) null, 1695, "('}xn;HJ.?Sd12sF");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("('}xn;HJ.?Sd12sF", owner0, car_CarType0, 1695, 1695, 1695, 1695, point0, "");
      double double1 = car0.getRange();
      assertEquals(1695.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Owner owner0 = new Owner("3DnM", ">F^d?L6bSaE]f;", "8u<Hw?,SE'QfZv3-", (-123), "3DnM");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = Double.valueOf((double) (-1));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-479.0), 0.0, (-543.6), (-1), point0, ">F^d?L6bSaE]f;");
      double double1 = car0.getRange();
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Owner owner0 = new Owner("Dono:           ", "Viagem:         ", "Viagem:         ", (-1764), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car car0 = new Car("Dono:           ", owner0, car_CarType0, 0.0, 0.0, (-2079.595), (-1522788922), (Point) null, "Viagem:         ");
      Point point0 = car0.getPosition();
      assertNull(point0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Owner owner0 = new Owner("", (String) null, (String) null, 42, "6");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1504.1422774));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 42, 0.0, 42, 42, point0, "");
      Point point1 = car0.getPosition();
      assertSame(point1, point0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "yyyy-MM-dd HH:mm", (String) null, 0, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-734.0779));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 415.884, 4307.641393041639, 4307.641393041639, (-1375), point0, "");
      String string0 = car0.getOwnerID();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Owner owner0 = new Owner("2*I$5:>DD'L/_X:uqs|", "2*I$5:>DD'L/_X:uqs|", "Pta|", 1139, "^=1}g-FD9Z=>/q");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(1139);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("^=1}g-FD9Z=>/q", owner0, car_CarType0, 1139, 1139, 1139, 3, point0, "2*I$5:>DD'L/_X:uqs|");
      String string0 = car0.getOwnerID();
      assertEquals("2*I$5:>DD'L/_X:uqs|", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 2165, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(2165);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("M1xkwRv36.nq", owner0, car_CarType0, 2165, 2165, 2165, 2165, point0, "$VALUES");
      String string0 = car0.getOwnerID();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Owner owner0 = new Owner("3DnM", ">F^d?L6bSaE]f;", "8u<Hw?,SE'QfZv3-", (-123), "3DnM");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = Double.valueOf((double) (-1));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car((String) null, owner0, car_CarType0, (-479.0), 0.0, (-543.6), (-1), point0, ">F^d?L6bSaE]f;");
      String string0 = car0.getNumberPlate();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Owner owner0 = new Owner("Dono:           ", "Viagem:         ", "Viagem:         ", (-1764), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1764));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-1764), (-1764), (-1764), (-1522788922), point0, "");
      String string0 = car0.getNumberPlate();
      assertEquals("Viagem:         ", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Owner owner0 = new Owner("FEP<", "FEP<", "", 0, "FEP<");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0, 0, 100, point0, "/OWe");
      String string0 = car0.getNumberPlate();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Owner owner0 = new Owner(");4r+/z;g}6Vb7uJ{)", ");4r+/z;g}6Vb7uJ{)", ");4r+/z;g}6Vb7uJ{)", 3643, "Electrico");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Custo Total: ", owner0, car_CarType0, 0.0, 0.0, 1589.855, 3643, point0, "Electrico");
      double double1 = car0.getBasePrice();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Owner owner0 = new Owner("Client:        ", "Client:        ", "Client:        ", (-3882), "Client:        ");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double(835.6999606206454);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Client:        ", owner0, car_CarType0, (-3882), 0.15, 0.0, (-3882), point0, "");
      double double1 = car0.getBasePrice();
      assertEquals(0.15, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Owner owner0 = new Owner("Gasolina", "`wj", "Gasolina", (-495), "`wj");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("REP,v", owner0, car_CarType0, (-683.797451730277), (-683.797451730277), 0.0, (-495), (Point) null, "$wAI");
      double double0 = car0.getBasePrice();
      assertEquals((-683.797451730277), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0.0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Model.Owner", (Owner) null, car_CarType0, 0.0, 0.0, 0.0, 1, point0, "pLyS1n");
      double double1 = car0.getAvgSpeed();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Owner owner0 = new Owner((String) null, "('}xn;HJ.?Sd12sF", (String) null, 1695, "('}xn;HJ.?Sd12sF");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-1.0));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("('}xn;HJ.?Sd12sF", owner0, car_CarType0, 1695, 1695, 1695, 1695, point0, "");
      double double1 = car0.getAvgSpeed();
      assertEquals(1695.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Owner owner0 = new Owner("%.2f", "%.2f", "OW{Q<GG]z)M2", (-3101), "%.2f");
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double((-3101));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("OW{Q<GG]z)M2", owner0, car_CarType0, (-3101), (-3101), (-3101), 4, point0, "OW{Q<GG]z)M2");
      double double1 = car0.getAvgSpeed();
      assertEquals((-3101.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Owner owner0 = new Owner("Client:        ", "1!;", "q-`bi-#C?A-YrnB", 1649, "Tempo Total: ");
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("/u", owner0, car_CarType0, 2417.1295779317, 30.139977684, 1649, 1649, (Point) null, (String) null);
      // Undeclared exception!
      try { 
        car0.setPosition((Point) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Car car0 = new Car("}/jKX%j", (Owner) null, car_CarType0, (-1.0), 4.0, (-1.0), 5535, (Point) null, (String) null);
      // Undeclared exception!
      try { 
        car0.rate(5535, 5535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Owner owner0 = new Owner("p}kEy*<uIX6osWw@", "=|wk$Efm#d", (String) null, (-475), "ItBsw8A7HIP'?z");
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car car0 = new Car("=|wk$Efm#d", owner0, car_CarType0, (-475), (-475), (-2618.03), 4318, (Point) null, "p}kEy*<uIX6osWw@");
      // Undeclared exception!
      try { 
        car0.hasRange((Point) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 983.245464, 983.245464, 455.324, 0, point0, "");
      // Undeclared exception!
      try { 
        car0.getOwnerID();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-129.8577));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 2501, 1.2, 2501, 691569711, point0, "");
      Car car1 = car0.clone();
      Car car2 = car1.clone();
      // Undeclared exception!
      try { 
        car2.equals(car1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Owner owner0 = new Owner("Dono:           ", "Viagem:         ", "Viagem:         ", (-1764), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1764));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-1764), (-1764), (-1764), (-1522788922), point0, "");
      Client client0 = new Client(point0, "Viagem:         ", (String) null, "", (String) null, 104);
      Rental rental0 = new Rental(car0, client0, point0);
      Car car1 = car0.clone();
      Car car2 = car1.clone();
      assertTrue(car2.equals((Object)car1));
      
      car2.approvePendingRental(rental0);
      boolean boolean0 = car2.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Car.CarType car_CarType1 = Car.CarType.hybrid;
      Owner owner0 = new Owner("(uw[|(|", "(uw[|(|", "(uw[|(|", 0, "D}/Cp");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("(uw[|(|", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      Car car1 = new Car("(uw[|(|", owner0, car_CarType1, 0, 0, 0, 0, point0, "D}/Cp");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("Ndany", "Ndany", "Ndany", 0, "D}QCp");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Ndany", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}QCp");
      Car car1 = new Car("Ndany", owner0, car_CarType0, 0, 0, 0, 0, point0, "Ndany");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("<Kp", "<Kp", "<Kp", 0, "D}/Cp");
      Owner owner1 = owner0.clone();
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("$VALUES", owner1, car_CarType0, 0, 0, 0, (-2819), point0, "]mz7##.");
      owner1.addCar(car0);
      Car car1 = new Car("<Kp", owner1, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      Car car2 = new Car("<Kp", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      boolean boolean0 = car1.equals(car2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.any;
      Owner owner0 = new Owner("2Ji}m/eGf#HbGW", "2Ji}m/eGf#HbGW", "Custo !ITotal: ", 0, ",7uh\"G");
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Custo !ITotal: ", owner0, car_CarType0, 0, 0, 0, 0, point0, ",7uh\"G");
      Car car1 = new Car("2Ji}m/eGf#HbGW", owner0, car_CarType0, 0, 0, 0, 0, point0, "Custo !ITotal: ");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Owner owner0 = new Owner("XJi}m/GBC#HbGR", "XJi}m/GBC#HbGR", "<Kp", 0, "XJi}m/GBC#HbGR");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("<Kp", owner0, car_CarType0, 0, 0, 0, 0, point0, "XJi}m/GBC#HbGR");
      Car car1 = new Car("XJi}m/GBC#HbGR", owner0, car_CarType0, 0, 0, 0, 0, point0, "<Kp");
      car1.rate(0, 0);
      car0.equals(car1);
      assertEquals(0, owner0.getRates());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("<Kp", "<Kp", "<Kp", 0, "D}/Cp");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("<Kp", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      Car car1 = new Car("<Kp", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      boolean boolean0 = car0.equals(car1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Owner owner0 = new Owner("Dono:           ", "Viagem:         ", "Viagem:         ", (-1764), "Viagem:         ");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1764));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Viagem:         ", owner0, car_CarType0, (-1764), (-1764), (-1764), (-1522788922), point0, "");
      Car car1 = car0.clone();
      car1.swapState();
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("XJi}m/GBC#HbGR", "XJi}m/GBC#HbGR", "Em<p", 0, "Em<p");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("XJi}m/GBC#HbGR", owner0, car_CarType0, 0, 0, 0, (-2819), point0, "]mz7##.");
      Car car1 = new Car("Em<p", owner0, car_CarType0, 0, 0, 0, 0, point0, "Em<p");
      boolean boolean0 = car1.equals(car0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("XJi}m/GBC#HbGR", "XJi}m/GBC#HbGR", "XJi}m/GBC#HbGR", 0, "D}/Cp");
      Double double0 = new Double(0.2);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("<Kp", owner0, car_CarType0, 0, 0, 0, 0, point0, "D}/Cp");
      Car car1 = new Car("XJi}m/GBC#HbGR", owner0, car_CarType0, 0, 0.2, 0, 0, point0, "D}/Cp");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 160053006, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1967.5747914330618));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 160053006, 1.2, 1762.7756954701385, 463, point0, "");
      Car car1 = new Car("", owner0, car_CarType0, 463, (-718.39), 1762.7756954701385, 160053006, point0, "(-1967.57, 176.15)");
      boolean boolean0 = car0.equals(car1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Owner owner0 = new Owner("", "", "hybrid", 0, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0.0, 0.0, 0, point0, "");
      boolean boolean0 = car0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double(2501);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 2501, (-387.76578660332063), 2501, 691569711, point0, "");
      boolean boolean0 = car0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Double double0 = new Double((-129.8577));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 2501, 1.2, 2501, 691569711, point0, "");
      boolean boolean0 = car0.equals(car0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("<Kp", "<Kp", "<Kp", 0, "D}/Cp");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("$VALUES", owner0, car_CarType0, 0, 0, 0, (-2819), point0, "]mz7##.");
      Car car1 = car0.clone();
      boolean boolean0 = car1.equals(car0);
      assertFalse(car0.equals((Object)car1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Owner owner0 = new Owner("", "", "hybrid", 0, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0.0, 0.0, 0, point0, "");
      Double double1 = new Double(0.15);
      Point point1 = new Point(double0, double1);
      car0.setPosition(point1, 0.15);
      String string0 = car0.warnings();
      assertEquals("O carro necessita de ser abastecido\n", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Double double0 = new Double(13);
      Point point0 = new Point(double0, double0);
      Car.CarType car_CarType0 = Car.CarType.fromString("Hibrido");
      assertEquals(Car.CarType.hybrid, car_CarType0);
      
      Owner owner0 = new Owner((String) null, "", "Model.Traffic", 2932, "");
      Car car0 = new Car("n", owner0, car_CarType0, (-1.0), 2932, 2932, 1, point0, "5F");
      String string0 = car0.warnings();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Owner owner0 = new Owner("Dono:           ", "Dono:           ", "Dono:           ", (-1764), "Dono:           ");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1764));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("Dono:           ", owner0, car_CarType0, (-1764), (-1764), (-1764), (-1522788957), point0, "e");
      boolean boolean0 = car0.hasRange(point0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Owner owner0 = new Owner("", "", "hybrid", 0, "");
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double(0);
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 0, 0.0, 0.0, 0, point0, "");
      Double double1 = new Double(0.15);
      Point point1 = new Point(double0, double1);
      car0.setPosition(point1, 0.15);
      boolean boolean0 = car0.hasRange(point1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Owner owner0 = new Owner("", "", "", 160053006, "");
      Car.CarType car_CarType0 = Car.CarType.gas;
      Double double0 = new Double((-1967.5747914330618));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", owner0, car_CarType0, 160053006, 1.2, 1762.7756954701385, 463, point0, "");
      car0.swapState();
      car0.swapState();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Electrico");
      assertEquals(Car.CarType.electric, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Todos");
      assertEquals(Car.CarType.any, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.fromString("Gasolina");
      assertEquals(Car.CarType.gas, car_CarType0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        Car.CarType.fromString("<Kp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car$CarType", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.hybrid;
      Car.CarType car_CarType1 = Car.CarType.any;
      boolean boolean0 = car_CarType0.equals(car_CarType1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Car.CarType car_CarType1 = Car.CarType.hybrid;
      boolean boolean0 = car_CarType0.equals(car_CarType1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      boolean boolean0 = car_CarType0.equals(car_CarType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-228));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.2, 0.2, 0.2, (-228), point0, "");
      Client client0 = new Client(point0, "", "", "NRilNhb\"8gdGwZ", "NRilNhb\"8gdGwZ", (-228));
      Rental rental0 = new Rental(car0, client0, point0);
      // Undeclared exception!
      try { 
        car0.pendingRental(rental0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-253));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.2, 0.2, 0.2, (-253), point0, "");
      // Undeclared exception!
      try { 
        car0.approvePendingRental((Rental) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Model.Car", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.electric;
      Double double0 = new Double((-228));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("", (Owner) null, car_CarType0, 0.2, 0.2, 0.2, (-228), point0, "");
      car0.setBasePrice((-3141.4567079));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Car.CarType car_CarType0 = Car.CarType.gas;
      Owner owner0 = new Owner("XJi}m/GBC#HbGR", "XJi}m/GBC#HbGR", "Em<p", 0, "Em<p");
      Double double0 = new Double((-2819));
      Point point0 = new Point(double0, double0);
      Car car0 = new Car("XJi}m/GBC#HbGR", owner0, car_CarType0, 0, 0, 0, (-2819), point0, "]mz7##.");
      car0.refil();
  }
}
