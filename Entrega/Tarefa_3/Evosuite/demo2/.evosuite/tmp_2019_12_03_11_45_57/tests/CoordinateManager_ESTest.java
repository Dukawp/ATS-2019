/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:47:18 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoordinateManager_ESTest extends CoordinateManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest((-11.529759), 1.0, (-887));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast(2.0, 2.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth((-90.0), (-90.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Coordinate> hashMap0 = CoordinateManager.getBoundingBox(2.0, 3.141592653589793, 1000);
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox((-90.0), 180.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth(0.0, (-180.0), (-382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest(3.141592653589793, 0.0, 1);
      assertEquals((-0.008983152841195214), coordinate0.getLongitude(), 0.01);
      assertEquals(3.141592653589793, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest((-90.0), 90.0, 1000);
      assertEquals((-90.0), coordinate0.getLatitude(), 0.01);
      assertEquals(69.95161393612258, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(0.0, 0.0, 3216);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals((-0.028889819537283815), coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(1, 1.0, 3462);
      assertEquals(1.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.9689003248637822, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth(1.0, 1.0, 1);
      assertEquals(1.0, coordinate0.getLongitude(), 0.01);
      assertEquals(1.0000089831528411, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth((-1.0), (-1.0), 70);
      assertEquals((-0.9993711793011163), coordinate0.getLatitude(), 0.01);
      assertEquals((-1.0), coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast(0.0, (-148.386), 1020);
      assertEquals((-139.22318410198088), coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast(1.0, 1.0, 1);
      assertEquals(1.0, coordinate0.getLatitude(), 0.01);
      assertEquals(1.0166261604728142, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceEast((-90.0), 0.0, 1);
      assertEquals((-90.0), coordinate0.getLatitude(), 0.01);
      assertEquals(0.02004838606387742, coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceWest(0.0, (-90.0), 1);
      assertEquals((-90.0089831528412), coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceSouth(0.0, (-21.4), 1);
      assertEquals((-8.983152841195216E-6), coordinate0.getLatitude(), 0.01);
      assertEquals((-21.4), coordinate0.getLongitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Coordinate coordinate0 = CoordinateManager.addDistanceNorth(0.0, 0.0, 1);
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(8.983152841195216E-6, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude(1445.277521498);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLongitude((-1168.4919));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude(1269.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude(1.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = CoordinateManager.latitudeConstant();
      assertEquals(111.31949079327356, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox((-21.4), 81.01830129459341, (-3743));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(0.0, 258.2695905731357, (-2453));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.getBoundingBox(12756.274, 0.0, 1000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest((-1.0), (-1.0), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast((-1.0), (-1.0), (-3649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast((-1868.0), (-92.40336), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(22.88419807027181, 22.88419807027181, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(2.0, 628.4668485688038, 2506);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceSouth(2280.6097561860206, 0.0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth(0.0, 0.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth(3.141592653589793, 273.42668, (-1158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceNorth(111.31949079327357, 1000.0, (-1708));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CoordinateManager.MAX_LATITUDE = 1269.0;
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest(1269.0, 1269.0, (-3010));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceEast(90.0, (-2192.09940125), 1390);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        CoordinateManager.addDistanceWest(140.695956, 1.0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // All parameters are required and must be valid
         //
         verifyException("CoordinateManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = CoordinateManager.isValidLatitude((-2093.8583629750146));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CoordinateManager coordinateManager0 = new CoordinateManager();
      assertEquals(180.0, CoordinateManager.MAX_LONGITUDE, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = CoordinateManager.longitudeConstant(1000.0);
      assertEquals(62.60375240547261, double0, 0.01);
  }
}
