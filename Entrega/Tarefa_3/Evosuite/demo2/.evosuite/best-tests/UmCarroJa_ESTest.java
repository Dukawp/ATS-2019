/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:47:55 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UmCarroJa_ESTest extends UmCarroJa_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(2.0, (-2165.879548975));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisPertoJa(coordinate1, coordinate0, parDatas0, "Zz9f*x");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem ve\u00EDculos dispon\u00EDveis para alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0, 0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.maisBaratoNoPerimetro(coordinate1, coordinate0, parDatas0, (-291.4395647980377), 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.determinarListaAlugCli("", "{<fUT!0]M");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // {<fUT!0]M
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.iniciarSessao("HKyq:}$z_HIG/S", (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // HKyq:}$z_HIG/S
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.guardarEstado("Nome: ", (GregorianCalendar) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        umCarroJa0.totalFactBDates("", mockGregorianCalendar0, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.respostaProp(true, aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarVeiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.registarUtilizador((Utilizador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 2336);
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Aluguer aluguer0 = new Aluguer("b3", "", mockGregorianCalendar0, mockGregorianCalendar0, (-2192.1), 2, 0, coordinate0, 509.35245079927, false, false, false, true, 2);
      // Undeclared exception!
      try { 
        umCarroJa0.registaAluguer(aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2870), (-2870), (-2870), 369, 1, (-2870));
      // Undeclared exception!
      try { 
        umCarroJa0.guardarEstado((String) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 1);
      try { 
        umCarroJa0.guardarEstado("", mockGregorianCalendar0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculoJa("Autonomia: ", 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarVeiculo(aluguer0, 3450);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Aluguer aluguer0 = new Aluguer();
      // Undeclared exception!
      try { 
        umCarroJa0.classificarCliente(aluguer0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.getAlugueresProp("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getUtilizador("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // *****    UTILIZADOR    *****
         // Nome: 
         // NIF: 
         // Email: 
         // Password: 
         // Morada: 
         // Data de Nascimento: 14/2/2014
         // Posi\u00E7\u00E3o em que o cliente se encontra: 0, 0
         // Classifica\u00E7\u00E3o do cliente: 0
         // N\u00FAmero de alugueres efetuados: 0
         // N\u00FAmero de Km percorridos: 0.0
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringVeiculo();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      String string0 = umCarroJa0.toStringUser();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.toStringAlugs();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNAlugs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      ParDatas parDatas0 = new ParDatas((GregorianCalendar) null, (GregorianCalendar) null);
      try { 
        umCarroJa0.maisBaratoJa(coordinate0, parDatas0, "ZU`t*Y\"W,Oo");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getAlugueresCliente("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o efetuou nenhum aluguer.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, (-4265), (-4265), 0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.determinadaAutonomia(coordinate0, parDatas0, 0, (-4265), 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o Existem Ve\u00EDculos Dispon\u00EDveis para Alugar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 608.32977496);
      ParDatas parDatas0 = new ParDatas();
      try { 
        umCarroJa0.veiculoEspecifico(coordinate0, parDatas0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 464, 5, 5, 24, 464);
      umCarroJa0.alugueresEfetuados(mockGregorianCalendar0);
      assertEquals("", umCarroJa0.getEmailUser());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.alugueresClassificarVeiculo();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.altPrecoKm("", 4.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.abastecerVeiculo("", 0.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.sinalizarDisponibilidade("Nu6iS0D4V)^", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nu6iS0D4V)^
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Veiculo veiculo0 = new Veiculo();
      umCarroJa0.registarVeiculo(veiculo0);
      try { 
        umCarroJa0.registarVeiculo(veiculo0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Tempo a p\u00E9 at\u00E9 ao ve\u00EDculo: ", "N\u00E3o efetuou nenhum aluguer.", "", (-1), 0.0, 0.0, (-1), coordinate0, true, (-1), linkedList0);
      umCarroJa0.registarVeiculo(veiculo0);
      TimeZone timeZone0 = TimeZone.getTimeZone("+,");
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      try { 
        umCarroJa0.maisProximo(coordinate0, parDatas0, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeVeiculo("Pre\u00E7o modificado pelo propriet\u00E1rio do ve\u00EDculo: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.get10ClientesAlugueres();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(0.0, 2.510527);
      Cliente cliente0 = new Cliente((String) null, (String) null, (String) null, (String) null, "BhB[Nw5L", mockGregorianCalendar0, coordinate0, 609, 609, 2.0);
      Utilizador utilizador0 = new Utilizador(cliente0);
      umCarroJa0.registarUtilizador(utilizador0);
      try { 
        umCarroJa0.get10ClientesKm();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // N\u00E3o existem clientes a apresentar.
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(0.0, 2.510527);
      Cliente cliente0 = new Cliente((String) null, (String) null, (String) null, (String) null, "BhB[Nw5L", mockGregorianCalendar0, coordinate0, 609, 609, 2.0);
      umCarroJa0.registarUtilizador(cliente0);
      List<Cliente> list0 = umCarroJa0.get10ClientesKm();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.getAlugueresVeiculo("x{fi;fvM6vLy\"d");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // x{fi;fvM6vLy\"d
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      boolean boolean0 = umCarroJa0.existeUtilizador("pKp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Cliente cliente0 = new Cliente();
      umCarroJa0.registarUtilizador(cliente0);
      Utilizador utilizador0 = umCarroJa0.getUtilizador("");
      assertEquals("", utilizador0.getNIF());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.classificarClienteJa("", 2360);
      assertEquals("", umCarroJa0.getEmailUser());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNUsers();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0);
      Coordinate coordinate0 = new Coordinate((-2112.139038663), 0);
      Aluguer aluguer0 = new Aluguer("UmCarroJa$1", "UmCarroJa$1", mockGregorianCalendar0, mockGregorianCalendar0, 0, 0, 0, coordinate0, (-850.0297743002), true, true, true, true, 0);
      // Undeclared exception!
      try { 
        umCarroJa0.altPrecoAluguer(0.0, aluguer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getEmailUser();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosCliente("Nux0Vq", (Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      int int0 = umCarroJa0.getNVeiculos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      // Undeclared exception!
      try { 
        umCarroJa0.getPosicaoCliente();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // Utilizador cannot be cast to Cliente
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0, 0);
      ParDatas parDatas0 = new ParDatas();
      UmCarroJa umCarroJa0 = new UmCarroJa();
      try { 
        umCarroJa0.maisBarato(coordinate0, parDatas0, (-2492));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Nao existem veiculos disponiveis para alugar. 1
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      umCarroJa0.logoutUtilizador();
      // Undeclared exception!
      try { 
        umCarroJa0.alugueresClassificarCliente();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      String string0 = umCarroJa0.getUserNIF();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      List<Aluguer> list0 = umCarroJa0.determinarListaEspera("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UmCarroJa umCarroJa0 = new UmCarroJa();
      Coordinate coordinate0 = new Coordinate((-2457), 2.0);
      // Undeclared exception!
      try { 
        umCarroJa0.alterarPosAutonomiaVeiculo("N\u00E3o efetuou nenhum aluguer.", coordinate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("UmCarroJa", e);
      }
  }
}
