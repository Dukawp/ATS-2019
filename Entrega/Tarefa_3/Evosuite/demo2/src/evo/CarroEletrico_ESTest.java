/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:51:01 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CarroEletrico_ESTest extends CarroEletrico_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(147, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      CarroEletrico carroEletrico0 = new CarroEletrico((String) null, (String) null, (String) null, 147, 147, 147, 0, coordinate0, true, 99, linkedList0);
      CarroEletrico carroEletrico1 = carroEletrico0.clone();
      assertNotSame(carroEletrico1, carroEletrico0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      CarroEletrico carroEletrico0 = new CarroEletrico("", "+KHkO>5P}Q9", "", 1, 0.0, 1509.4782, 1, coordinate0, false, 1, linkedList0);
      CarroEletrico carroEletrico1 = carroEletrico0.clone();
      assertNotSame(carroEletrico0, carroEletrico1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      CarroEletrico carroEletrico0 = new CarroEletrico("&appid=", "", "", (-1), (-1), (-1), 4385, (Coordinate) null, false, (-1), linkedList0);
      CarroEletrico carroEletrico1 = carroEletrico0.clone();
      assertEquals((-1), carroEletrico1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(117.62874383689, (-3843.48836653336));
      CarroEletrico carroEletrico0 = new CarroEletrico();
      List<ParDatas> list0 = carroEletrico0.getDatasAlugueres();
      CarroEletrico carroEletrico1 = new CarroEletrico("", "", "", (-1), (-3843.48836653336), 0.0, (-1), coordinate0, false, (-1), list0);
      CarroEletrico carroEletrico2 = carroEletrico1.clone();
      assertNotSame(carroEletrico1, carroEletrico2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      carroEletrico0.setPosicao((Coordinate) null);
      // Undeclared exception!
      try { 
        carroEletrico0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, (-1));
      CarroEletrico carroEletrico0 = null;
      try {
        carroEletrico0 = new CarroEletrico("", "~UpJ (fjI~`Ne?<", (String) null, (-1), (-1), 2201.8, 0, coordinate0, false, (-1), (List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CarroEletrico carroEletrico0 = null;
      try {
        carroEletrico0 = new CarroEletrico((CarroEletrico) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      CarroEletrico carroEletrico1 = new CarroEletrico(carroEletrico0);
      boolean boolean0 = carroEletrico0.equals(carroEletrico1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      Object object0 = new Object();
      boolean boolean0 = carroEletrico0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      boolean boolean0 = carroEletrico0.equals(carroEletrico0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      boolean boolean0 = carroEletrico0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      CarroEletrico carroEletrico1 = carroEletrico0.clone();
      assertEquals(0.0, carroEletrico1.getConsumo(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CarroEletrico carroEletrico0 = new CarroEletrico();
      String string0 = carroEletrico0.toString();
      assertEquals("***** Carro El\u00E9trico *****\n*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, (-4748));
      CarroEletrico carroEletrico0 = new CarroEletrico();
      List<ParDatas> list0 = carroEletrico0.getDatasAlugueres();
      CarroEletrico carroEletrico1 = new CarroEletrico((String) null, "m_AE8$5kY*NdH09l", "siypD]@<joUB/T", 1100, 1100, 70.0, (-4748), coordinate0, true, 1100, list0);
      // Undeclared exception!
      try { 
        carroEletrico1.equals(carroEletrico0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }
}
