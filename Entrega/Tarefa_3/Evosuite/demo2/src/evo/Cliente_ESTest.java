/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:49:49 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cliente_ESTest extends Cliente_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente0.setNKM((-3818.7));
      cliente0.equals(cliente1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente0.setNAlugueres(205);
      cliente0.equals(cliente1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1525, (-3759), 0, 1, 1525);
      Coordinate coordinate0 = new Coordinate((-3759), (-1.0));
      Cliente cliente0 = new Cliente("~t1`/5*K:ExP>", "~t1`/5*K:ExP>", "=%@HEjlHdj~", "", "~t1`/5*K:ExP>", mockGregorianCalendar0, coordinate0, 0, 2560, (-1.0));
      cliente0.getPosicao();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNKM(1678.870854);
      cliente0.getNKm();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Cliente cliente0 = new Cliente("", "", (String) null, "\n", "", (GregorianCalendar) null, coordinate0, 1, 1, 0.0);
      cliente0.getNAlugueres();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate((-1.0), (-1.0));
      Cliente cliente0 = new Cliente("<k", "<k", "", "", "", mockGregorianCalendar0, coordinate0, 2, (-1410), (-1.0));
      cliente0.getNAlugueres();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(0.0, 1360.2445663);
      Cliente cliente0 = new Cliente("08W", "zHi>(Y}wgRmj?w_tZ@", "zHi>(Y}wgRmj?w_tZ@", "n\"zy=C\u0003_0", "n\"zy=C\u0003_0", mockGregorianCalendar0, coordinate0, 3075, 3075, 0.0);
      cliente0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, (-1066), (-1423), 0);
      Coordinate coordinate0 = new Coordinate((-1066), 0.0);
      Cliente cliente0 = new Cliente("Utilizador", "", "", "", "xGugH&*3\"PQJ?", mockGregorianCalendar0, coordinate0, (-1066), 0, 0.0);
      cliente0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNKM(1678.870854);
      cliente0.clone();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNAlugueres(304);
      cliente0.clone();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Cliente cliente0 = new Cliente("4(\"Z\"#$.T0AS|.P5", "4(\"Z\"#$.T0AS|.P5", "4(\"Z\"#$.T0AS|.P5", "vyE", "4(\"Z\"#$.T0AS|.P5", mockGregorianCalendar0, coordinate0, (-860), (-860), (-1.0));
      Cliente cliente1 = cliente0.clone();
      assertEquals((-860), cliente1.getNAlugueres());
      assertEquals((-1.0), cliente0.getNKm(), 0.01);
      assertTrue(cliente1.equals((Object)cliente0));
      assertEquals((-860), cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setClassificacao(304);
      cliente0.clone();
      assertEquals(304, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1875.937783902, (-1.0));
      Cliente cliente0 = new Cliente("\n", "\n", "", "zJ)\u0005:", "N\u00FAmero de Km percorridos: ", (GregorianCalendar) null, coordinate0, (-1716), (-1716), (-75.7883914045764));
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1809, 1809, 705, 1809, 1809, 162);
      mockGregorianCalendar0.setLenient(false);
      Coordinate coordinate0 = new Coordinate(162, 705);
      Cliente cliente0 = new Cliente("Morada: ", ";", ";", ";", "Morada: ", mockGregorianCalendar0, coordinate0, (-467), 162, (-309.87299019));
      // Undeclared exception!
      try { 
        cliente0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-573), (-573), (-2415), 0, (-573));
      Cliente cliente0 = new Cliente("2G.#xo*x7[Jdp{", "", ".MR{H", ".MR{H", "", mockGregorianCalendar0, (Coordinate) null, (-573), (-1), (-1.0));
      // Undeclared exception!
      try { 
        cliente0.getPosicao();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setEmail((String) null);
      Cliente cliente1 = new Cliente(cliente0);
      // Undeclared exception!
      try { 
        cliente0.equals(cliente1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4983), 1, (-1223));
      Cliente cliente0 = new Cliente("", "Wg{XbC4B}u\"T`X", "Wg{XbC4B}u\"T`X", "", "", mockGregorianCalendar0, (Coordinate) null, 176, (-4983), (-2349.564433872202));
      // Undeclared exception!
      try { 
        cliente0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Cliente", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Cliente cliente0 = null;
      try {
        cliente0 = new Cliente((Cliente) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Utilizador", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = cliente0.getPosicao();
      assertEquals(0.0, coordinate0.getLongitude(), 0.01);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0.0, coordinate0.getLatitude(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      double double0 = cliente0.getNKm();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getNAlugueres();
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente(cliente0);
      cliente0.setClassificacao((-347));
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals((-347), cliente0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      int int0 = cliente0.getClassificacao();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, int0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      boolean boolean0 = cliente1.equals(cliente0);
      assertTrue(cliente0.equals((Object)cliente1));
      assertEquals(0, cliente1.getNAlugueres());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente1.getClassificacao());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente0.setNAlugueres(205);
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals(205, cliente0.getNAlugueres());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = new Cliente();
      cliente0.setClassificacao(12);
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(12, cliente0.getClassificacao());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = new Coordinate((-465.861493047561), 0);
      cliente0.setPosicao(coordinate0);
      Cliente cliente1 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente1);
      assertFalse(boolean0);
      assertEquals(0, cliente1.getClassificacao());
      assertEquals(0.0, cliente1.getNKm(), 0.01);
      assertEquals(0, cliente1.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNome("l+H6Mx@ZKP|t");
      Cliente cliente1 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente1);
      assertEquals(0, cliente1.getNAlugueres());
      assertFalse(boolean0);
      assertEquals(0.0, cliente1.getNKm(), 0.01);
      assertEquals(0, cliente1.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1875.937783902, (-1.0));
      Cliente cliente0 = new Cliente("\n", "\n", "", "zJ)\u0005:", "N\u00FAmero de Km percorridos: ", (GregorianCalendar) null, coordinate0, (-1716), (-1716), (-75.7883914045764));
      Object object0 = new Object();
      boolean boolean0 = cliente0.equals(object0);
      assertEquals((-1716), cliente0.getClassificacao());
      assertEquals((-75.7883914045764), cliente0.getNKm(), 0.01);
      assertFalse(boolean0);
      assertEquals((-1716), cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals((Object) null);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getClassificacao());
      assertFalse(boolean0);
      assertEquals(0, cliente0.getNAlugueres());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      boolean boolean0 = cliente0.equals(cliente0);
      assertTrue(boolean0);
      assertEquals(0.0, cliente0.getNKm(), 0.01);
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Coordinate coordinate0 = new Coordinate(1.0, 1.0);
      cliente0.setPosicao(coordinate0);
      cliente0.getPosicao();
      assertEquals(0, cliente0.getNAlugueres());
      assertEquals(0, cliente0.getClassificacao());
      assertEquals(0.0, cliente0.getNKm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      String string0 = cliente0.toString();
      assertEquals("*****    UTILIZADOR    *****\nNome: \nNIF: \nEmail: \nPassword: \nMorada: \nData de Nascimento: 14/2/2014\nPosi\u00E7\u00E3o em que o cliente se encontra: 0, 0\nClassifica\u00E7\u00E3o do cliente: 0\nN\u00FAmero de alugueres efetuados: 0\nN\u00FAmero de Km percorridos: 0.0\n", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      cliente0.setNKM((-3818.7));
      double double0 = cliente0.getNKm();
      assertEquals((-3818.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Cliente cliente0 = new Cliente();
      Cliente cliente1 = cliente0.clone();
      cliente0.setNKM((-3818.7));
      boolean boolean0 = cliente1.equals(cliente0);
      assertEquals((-3818.7), cliente0.getNKm(), 0.01);
      assertFalse(boolean0);
  }
}
