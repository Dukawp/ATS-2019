/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:47:22 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.ZonedDateTime;
import java.time.chrono.ThaiBuddhistDate;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Aluguer_ESTest extends Aluguer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-1571.36), (-1571.36));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      coordinate1.clone();
      mockGregorianCalendar0.setFirstDayOfWeek((-1229));
      mockGregorianCalendar0.getTime();
      Aluguer aluguer0 = new Aluguer("!", "!", mockGregorianCalendar0, mockGregorianCalendar0, (-2841.84926582), (-1950), (-1229), coordinate1, (-3995.0), false, true, false, false, (-1788));
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setEstadoClassificacao((-1129));
      aluguer1.setEstadoClassificacao((-1129));
      aluguer1.toString();
      Aluguer aluguer2 = aluguer1.clone();
      aluguer0.getDataFim();
      aluguer0.setEstadoClassificacao((-1229));
      Aluguer aluguer3 = aluguer1.clone();
      aluguer2.toString();
      aluguer3.getDataInicio();
      aluguer2.toString();
      Object object0 = new Object();
      aluguer2.equals(object0);
      aluguer3.setAlteraPreco(true);
      aluguer0.getDataInicio();
      aluguer0.equals("!");
      aluguer3.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.before("{3J[9oLsh=qR");
      mockGregorianCalendar0.setLenient(false);
      Coordinate coordinate0 = new Coordinate(3672.7328405, 495.744);
      Aluguer aluguer0 = new Aluguer("{3J[9oLsh=qR", "NFqJK42_:", mockGregorianCalendar0, mockGregorianCalendar0, 3672.7328405, (-1), (-1876), coordinate0, 3672.7328405, false, false, false, false, 1000);
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setCustoViagem(3672.7328405);
      aluguer1.setCustoViagem(495.744);
      Aluguer aluguer2 = aluguer0.clone();
      aluguer2.getDataFim();
      aluguer1.getDataFim();
      aluguer2.getDataInicio();
      // Undeclared exception!
      try { 
        MockThaiBuddhistDate.of((-2160), 806, 806);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): 806
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2146826585, 2146826585, (-989));
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1431655763));
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(4573, (-878), 2146663145, 286, (-989), (-878));
      Coordinate coordinate0 = new Coordinate((-989), (-878));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Aluguer aluguer0 = new Aluguer("3y|0z", "2LCjF}PzJ", mockGregorianCalendar0, mockGregorianCalendar1, (-989), 286, (-878), coordinate1, (-933.08), false, true, true, true, 2146826585);
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setListaEspera(false);
      aluguer1.getDataInicio();
      Aluguer aluguer2 = aluguer1.clone();
      aluguer2.equals(coordinate1);
      aluguer0.equals(aluguer1);
      System.setCurrentTimeMillis(0L);
      aluguer1.clone();
      aluguer2.getDataFim();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.toString();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer0.setEstadoClassificacao((-1272));
      aluguer0.setAceite(false);
      aluguer1.getListaEspera();
      aluguer1.setListaEspera(true);
      aluguer1.setAceite(true);
      aluguer1.setEstadoClassificacao((-3350));
      Aluguer aluguer2 = aluguer0.clone();
      aluguer1.toString();
      aluguer0.toString();
      aluguer0.equals(aluguer1);
      aluguer1.setCustoViagem(915.0);
      aluguer1.getListaEspera();
      aluguer0.getDataInicio();
      aluguer0.setEstadoClassificacao((-3350));
      aluguer1.getEmail();
      aluguer1.getTempoViagem();
      aluguer2.getDataInicio();
      System.setCurrentTimeMillis((-2526L));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1.0, (-1.0));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      coordinate1.toString();
      coordinate0.getLatitudeAsString();
      Aluguer aluguer0 = new Aluguer();
      aluguer0.toString();
      coordinate0.equals(aluguer0);
      Aluguer aluguer1 = new Aluguer("Aluguer Aceite pelo Propriet\u00E1rio: ", "*VHokqL~%}@'<!^u", (GregorianCalendar) null, (GregorianCalendar) null, 1.0, 1839, 1839, coordinate1, 3.141592653589793, false, false, true, false, 1839);
      aluguer1.setRealizado(false);
      Aluguer aluguer2 = aluguer1.clone();
      Aluguer aluguer3 = aluguer2.clone();
      aluguer3.setEstadoClassificacao((-2138));
      Aluguer aluguer4 = aluguer1.clone();
      Aluguer aluguer5 = aluguer1.clone();
      aluguer4.setListaEspera(false);
      aluguer5.setEstadoClassificacao(892);
      // Undeclared exception!
      try { 
        aluguer1.equals(aluguer4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Aluguer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.toString();
      Aluguer aluguer2 = aluguer0.clone();
      aluguer2.clone();
      Aluguer aluguer3 = aluguer0.clone();
      aluguer3.toString();
      aluguer0.setCustoViagem(0.0);
      aluguer0.setEstadoClassificacao(1);
      aluguer0.toString();
      Aluguer aluguer4 = aluguer0.clone();
      aluguer4.setRealizado(false);
      aluguer4.setListaEspera(false);
      aluguer4.setRealizado(false);
      aluguer0.getListaEspera();
      aluguer4.getAlteraPreco();
      aluguer3.getDataInicio();
      aluguer3.equals(aluguer0);
      aluguer0.getAceite();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.toString();
      aluguer0.setListaEspera(false);
      aluguer0.equals(aluguer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.toString();
      aluguer0.setListaEspera(false);
      aluguer0.setListaEspera(false);
      Aluguer aluguer2 = new Aluguer();
      aluguer2.setEstadoClassificacao((-2138));
      aluguer1.equals(aluguer2);
      aluguer1.equals(aluguer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-3066.0881535), (-3066.0881535));
      Aluguer aluguer0 = new Aluguer("*****    ALUGUER    *****\n", (String) null, (GregorianCalendar) null, (GregorianCalendar) null, (-3066.0881535), 1655, 1, coordinate0, 1, true, true, true, false, 374);
      aluguer0.getDataInicio();
      aluguer0.equals(coordinate0);
      aluguer0.getDataFim();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.getAlteraPreco();
      Aluguer aluguer2 = aluguer1.clone();
      aluguer0.setCustoViagem(2156.86620790025);
      aluguer1.setCustoViagem(2156.86620790025);
      aluguer1.setRealizado(false);
      aluguer0.getCustoViagem();
      aluguer1.getEmail();
      aluguer1.setEstadoClassificacao(0);
      aluguer0.setAceite(false);
      Coordinate coordinate0 = aluguer0.getDestino();
      aluguer1.getDistancia();
      Aluguer aluguer3 = new Aluguer(aluguer1);
      aluguer3.setListaEspera(true);
      aluguer1.equals(aluguer3);
      aluguer3.setEstadoClassificacao(0);
      aluguer0.getListaEspera();
      aluguer3.setCustoViagem(2156.86620790025);
      aluguer3.setRealizado(false);
      aluguer0.getDistancia();
      aluguer3.getDistancia();
      aluguer1.setEstadoClassificacao(0);
      aluguer0.setAceite(false);
      aluguer0.getTempoAteVeiculo();
      aluguer1.getListaEspera();
      aluguer2.getEmail();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 1, 209, (-1), 105);
      Aluguer aluguer4 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, 2156.86620790025, 1, (-3657), coordinate0, 0.0, false, false, true, false, 209);
      aluguer3.equals(aluguer4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setRealizado(false);
      aluguer0.setRealizado(false);
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.setAceite(false);
      aluguer0.setAlteraPreco(true);
      aluguer0.setListaEspera(false);
      aluguer0.setAceite(false);
      aluguer0.setCustoViagem(0.0);
      aluguer0.setListaEspera(false);
      aluguer0.setAceite(false);
      aluguer0.setRealizado(false);
      aluguer0.getCustoViagem();
      aluguer0.setListaEspera(false);
      aluguer0.setAlteraPreco(true);
      aluguer1.getAceite();
      aluguer1.setAceite(false);
      Object object0 = new Object();
      aluguer0.equals(object0);
      aluguer1.setEstadoClassificacao(0);
      aluguer1.getTempoAteVeiculo();
      aluguer1.getDistancia();
      aluguer0.getAlteraPreco();
      aluguer1.getListaEspera();
      Aluguer aluguer2 = aluguer1.clone();
      aluguer2.toString();
      Aluguer aluguer3 = new Aluguer();
      aluguer0.equals(aluguer3);
      aluguer3.getCustoViagem();
      aluguer3.getDataFim();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 948, (-2507), (-2507), (-2507));
      Coordinate coordinate0 = new Coordinate(948, (-1616));
      mockGregorianCalendar0.getTimeZone();
      coordinate0.toString();
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      Aluguer aluguer0 = new Aluguer("w<u)i+#h9_To4", "Data de in\u00EDcio do aluguer: ", mockGregorianCalendar0, mockGregorianCalendar0, (-2061.478185), 948, (-1616), coordinate0, 0.0, true, true, true, true, 0);
      aluguer0.setEstadoClassificacao(0);
      aluguer0.setAceite(false);
      aluguer0.setCustoViagem((-1616));
      aluguer0.setRealizado(true);
      aluguer0.setRealizado(true);
      aluguer0.equals(coordinate0);
      aluguer0.getDataFim();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-759), 666, (-759), 80, 0);
      Coordinate coordinate0 = new Coordinate(2481.434983, 688.7298);
      Aluguer aluguer0 = new Aluguer("Coordinate", "55\"SwbO]h", mockGregorianCalendar0, mockGregorianCalendar0, (-1.0), 80, (-759), coordinate0, (-1.0), true, true, false, true, 0);
      aluguer0.setCustoViagem((-759));
      aluguer0.setRealizado(false);
      mockGregorianCalendar0.clear(1);
      aluguer0.setRealizado(false);
      aluguer0.getDestino();
      aluguer0.getDistancia();
      aluguer0.setAceite(false);
      aluguer0.setAceite(true);
      Aluguer aluguer1 = new Aluguer("Coordinate", "", mockGregorianCalendar0, mockGregorianCalendar0, (-1.0), 1676, 80, coordinate0, 80, true, true, true, false, 0);
      aluguer1.setRealizado(true);
      aluguer0.equals(aluguer1);
      aluguer1.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer0.setAceite(true);
      aluguer0.setRealizado(true);
      aluguer1.setAceite(true);
      aluguer1.setEstadoClassificacao(0);
      aluguer1.setCustoViagem((-1.0));
      aluguer0.setCustoViagem((-586.3414003295504));
      aluguer1.setAlteraPreco(true);
      aluguer1.toString();
      aluguer1.getEstadoClassificacao();
      aluguer0.setAlteraPreco(false);
      aluguer1.toString();
      aluguer0.getMatricula();
      aluguer1.setRealizado(true);
      aluguer1.setAlteraPreco(true);
      aluguer0.getTempoAteVeiculo();
      aluguer0.setAceite(true);
      aluguer1.getEmail();
      GregorianCalendar gregorianCalendar0 = aluguer0.getDataInicio();
      aluguer0.setCustoViagem((-24.01805671852));
      aluguer0.setEstadoClassificacao(0);
      Coordinate coordinate0 = new Coordinate(0, (-586.3414003295504));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Aluguer aluguer2 = new Aluguer("", "", gregorianCalendar0, gregorianCalendar0, (-4702.0886), 0, (-1618), coordinate1, 4766.434181, false, true, true, false, 1166);
      aluguer1.equals(aluguer2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.toString();
      aluguer0.setListaEspera(true);
      aluguer0.setListaEspera(true);
      Aluguer aluguer2 = new Aluguer();
      aluguer1.equals(aluguer2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(2299, 1871);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Aluguer aluguer0 = new Aluguer("", "", (GregorianCalendar) null, (GregorianCalendar) null, 1.0, 1871, 2299, coordinate1, 0.0, false, false, false, true, 0);
      aluguer0.getDataInicio();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.toString();
      Aluguer aluguer2 = aluguer0.clone();
      aluguer2.clone();
      Aluguer aluguer3 = aluguer0.clone();
      aluguer3.toString();
      aluguer0.setCustoViagem(0.0);
      aluguer0.setEstadoClassificacao(1);
      aluguer0.toString();
      Aluguer aluguer4 = aluguer0.clone();
      aluguer4.setRealizado(false);
      aluguer4.setListaEspera(false);
      aluguer4.setRealizado(false);
      aluguer0.setAceite(true);
      aluguer4.setRealizado(true);
      aluguer0.setCustoViagem(1);
      aluguer0.getListaEspera();
      aluguer4.getAlteraPreco();
      aluguer3.getDataInicio();
      aluguer3.equals(aluguer0);
      aluguer0.getAceite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-1.0), 0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Aluguer aluguer0 = new Aluguer("Matr\u00EDcula do Ve\u00EDculo: ", "Matr\u00EDcula do Ve\u00EDculo: ", (GregorianCalendar) null, mockGregorianCalendar0, (-1.0), 0, 0, coordinate1, (-1.0), false, false, false, false, 0);
      aluguer0.getTempoViagem();
      Object object0 = new Object();
      mockGregorianCalendar0.after(object0);
      aluguer0.setAceite(true);
      aluguer0.setListaEspera(false);
      Aluguer aluguer1 = aluguer0.clone();
      mockGregorianCalendar0.set(0, 0, 0, 0, 0, 0);
      coordinate1.toString();
      aluguer1.setAceite(true);
      aluguer1.setRealizado(false);
      aluguer1.getAlteraPreco();
      aluguer1.equals((Object) null);
      aluguer1.clone();
      aluguer0.getMatricula();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate(0.0, 175.67615901275073);
      Aluguer aluguer0 = new Aluguer("s4gR;k\"O", "The parameter did not pass validation as defined by the CoordinateManager class", mockGregorianCalendar0, mockGregorianCalendar0, 1.0, (-66), (-66), coordinate0, (-1.0), false, false, true, true, (-66));
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.clone();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.toString();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer0.setEstadoClassificacao((-1272));
      aluguer0.setAceite(false);
      aluguer1.getListaEspera();
      aluguer1.setListaEspera(true);
      aluguer1.setEstadoClassificacao((-3350));
      aluguer0.clone();
      aluguer1.toString();
      aluguer0.toString();
      aluguer0.equals(aluguer1);
      aluguer1.setCustoViagem(915.0);
      aluguer1.getListaEspera();
      aluguer0.getDataInicio();
      aluguer0.setEstadoClassificacao((-3350));
      aluguer1.getEmail();
      aluguer1.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao(590);
      aluguer0.setListaEspera(false);
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.setRealizado(false);
      Object object0 = new Object();
      aluguer0.setListaEspera(false);
      aluguer0.setAlteraPreco(false);
      aluguer1.setEstadoClassificacao(0);
      aluguer1.setRealizado(false);
      aluguer0.setListaEspera(false);
      aluguer0.setRealizado(true);
      aluguer0.setAceite(true);
      aluguer0.equals(object0);
      aluguer0.getEstadoClassificacao();
      aluguer0.getMatricula();
      aluguer1.getDistancia();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.toString();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.setListaEspera(true);
      aluguer0.getEstadoClassificacao();
      aluguer0.getTempoViagem();
      aluguer0.setListaEspera(true);
      aluguer1.setAlteraPreco(true);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Aluguer aluguer0 = null;
      try {
        aluguer0 = new Aluguer((Aluguer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Aluguer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Coordinate coordinate0 = new Coordinate((-1), (-1.0));
      Aluguer aluguer0 = new Aluguer("Data de fim do aluguer: ", (String) null, mockGregorianCalendar0, mockGregorianCalendar0, (-400.6260364084), (-1), (-1), coordinate0, 170.628072214, false, false, false, false, (-1));
      coordinate0.getLatitudeAsString();
      aluguer0.getTempoAteVeiculo();
      aluguer0.getEmail();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer("8!^*@} )=KR>;vyq", "8!^*@} )=KR>;vyq", (GregorianCalendar) null, (GregorianCalendar) null, 0.0, (-3197), (-3197), (Coordinate) null, 0.0, true, false, false, true, (-3197));
      aluguer0.clone();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 3415);
      Coordinate coordinate0 = new Coordinate(3415, 3415);
      coordinate0.toString();
      Aluguer aluguer0 = new Aluguer((String) null, (String) null, mockGregorianCalendar0, mockGregorianCalendar0, 0, 3415, 0, coordinate0, 1.0, true, true, true, true, (-36));
      aluguer0.getTempoViagem();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer0.getMatricula();
      coordinate0.getLongitudeAsString();
      aluguer0.toString();
      aluguer0.getDistancia();
      coordinate0.clone();
      aluguer0.toString();
      aluguer0.getDestino();
      aluguer0.getDataFim();
      aluguer0.getRealizado();
      aluguer0.getAlteraPreco();
      aluguer1.getTempoAteVeiculo();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      Coordinate coordinate0 = new Coordinate((-1.0), (-1622.29));
      Aluguer aluguer1 = new Aluguer((String) null, (String) null, gregorianCalendar0, gregorianCalendar0, (-1.0), 0, 0, coordinate0, (-1.0), false, false, false, true, (-1));
      aluguer0.equals(aluguer1);
      aluguer1.getDestino();
      aluguer0.getListaEspera();
      aluguer1.setEstadoClassificacao(0);
      aluguer0.setEstadoClassificacao((-1));
      aluguer1.setEstadoClassificacao(1686);
      aluguer1.setAceite(false);
      aluguer0.getEstadoClassificacao();
      aluguer1.getDataInicio();
      aluguer1.getEmail();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-241), (-241), (-1), 246, (-241));
      Coordinate coordinate0 = new Coordinate(0.0, (-241));
      Aluguer aluguer0 = new Aluguer("FbS&;SHImG:/MzlN", "FbS&;SHImG:/MzlN", mockGregorianCalendar0, mockGregorianCalendar0, 246, 1, (-1), coordinate0, (-241), true, true, true, true, (-1));
      aluguer0.setListaEspera(true);
      aluguer0.toString();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setEstadoClassificacao(0);
      aluguer1.getCustoViagem();
      aluguer1.setListaEspera(false);
      aluguer0.getRealizado();
      Object object0 = new Object();
      aluguer0.equals(object0);
      aluguer1.getListaEspera();
      aluguer1.getDistancia();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setCustoViagem(1715.563627786001);
      aluguer0.setListaEspera(true);
      aluguer0.getListaEspera();
      aluguer0.getDataInicio();
      aluguer0.getDistancia();
      aluguer0.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setRealizado(false);
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.getCustoViagem();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(0, 727, 727, 0, 727);
      Aluguer aluguer0 = new Aluguer("L@mepS8[HEBm_", "L@mepS8[HEBm_", mockGregorianCalendar0, mockGregorianCalendar1, (-2764.743213), 1337, (-5717), (Coordinate) null, 456.5677795058, true, false, true, true, (-720));
      aluguer0.getCustoViagem();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Object object0 = new Object();
      mockGregorianCalendar0.before(object0);
      Coordinate coordinate0 = new Coordinate((-1826), 1.0);
      coordinate0.getLongitudeAsString();
      Aluguer aluguer0 = new Aluguer("Aluguer em lista de espera: ", "Aluguer em lista de espera: ", mockGregorianCalendar0, mockGregorianCalendar0, 1.0, (-1826), (-1826), coordinate0, 1.0, true, true, false, false, 1309);
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setCustoViagem(1.0);
      aluguer0.setListaEspera(false);
      aluguer1.setRealizado(true);
      aluguer1.getMatricula();
      aluguer0.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 1, 0, 0);
      Coordinate coordinate0 = new Coordinate(0, 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Aluguer aluguer0 = new Aluguer("\"$U", "\"$U", mockGregorianCalendar0, mockGregorianCalendar0, 1, 1, 0, coordinate1, (-1597.966025336359), true, true, true, true, 2952);
      aluguer0.getRealizado();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setRealizado(true);
      aluguer0.equals(aluguer1);
      Aluguer aluguer2 = aluguer1.clone();
      aluguer1.getDestino();
      aluguer2.setRealizado(false);
      aluguer1.setCustoViagem(2504.356);
      aluguer0.setRealizado(true);
      aluguer1.setAlteraPreco(true);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3093, 0, 0, 3093, 3093, 3093);
      mockGregorianCalendar0.set(1, 0, 1, 1, 0, 1);
      Aluguer aluguer0 = new Aluguer((String) null, "[@S34`pVRA7`", mockGregorianCalendar0, mockGregorianCalendar0, (-1.0), 3093, 0, (Coordinate) null, (-2091.888348734552), true, true, false, true, 1115);
      aluguer0.setEstadoClassificacao(1);
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setAlteraPreco(true);
      aluguer1.getDestino();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setRealizado(false);
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.getAlteraPreco();
      aluguer1.getListaEspera();
      aluguer0.setEstadoClassificacao((-1));
      aluguer0.getEmail();
      aluguer1.setEstadoClassificacao(0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setAceite(true);
      aluguer0.getDistancia();
      aluguer0.getDataFim();
      aluguer0.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.getRealizado();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getTempoAteVeiculo();
      aluguer0.setAceite(false);
      aluguer0.getAceite();
      aluguer0.getDistancia();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getDataInicio();
      aluguer0.setAlteraPreco(false);
      aluguer0.getMatricula();
      aluguer0.clone();
      aluguer0.getDataFim();
      aluguer0.getMatricula();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao((-3757));
      aluguer0.setCustoViagem((-3757));
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setListaEspera(true);
      aluguer1.getMatricula();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1816, (-1123), 1);
      Coordinate coordinate0 = new Coordinate((-1.0), 2122.78);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Aluguer aluguer0 = new Aluguer("% &N^~vgp5Iz?x^{~e", "% &N^~vgp5Iz?x^{~e", mockGregorianCalendar0, mockGregorianCalendar0, 0.0, (-178), 0, coordinate1, (-1.0), false, false, false, false, 1816);
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.clone();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), (-1), 0, 95);
      Coordinate coordinate0 = new Coordinate(1022.80161519, (-1859.0));
      Aluguer aluguer0 = new Aluguer("", "", mockGregorianCalendar0, mockGregorianCalendar0, (-1859.0), 0, 95, coordinate0, 0.0, true, true, false, true, (-1));
      aluguer0.clone();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setAlteraPreco(true);
      aluguer0.setListaEspera(true);
      aluguer0.toString();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setAlteraPreco(true);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao(0);
      aluguer0.clone();
      aluguer0.getDataFim();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setEstadoClassificacao((-4888));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setRealizado(true);
      aluguer0.getEmail();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setListaEspera(true);
      aluguer0.getAceite();
      aluguer0.getDataFim();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.setAceite(false);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setCustoViagem(918.61611);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.getTempoViagem();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      System.setCurrentTimeMillis((-1515L));
      Aluguer aluguer1 = new Aluguer(aluguer0);
      System.setCurrentTimeMillis(0L);
      aluguer1.clone();
      Aluguer aluguer2 = new Aluguer();
      aluguer0.equals(aluguer2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      aluguer0.getDataFim();
      Aluguer aluguer1 = aluguer0.clone();
      aluguer1.setAlteraPreco(true);
      System.setCurrentTimeMillis(0L);
      aluguer1.equals(aluguer0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.setRealizado(true);
      aluguer0.equals(aluguer1);
      aluguer0.setRealizado(true);
      aluguer0.setRealizado(true);
      aluguer0.clone();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      Object object0 = new Object();
      aluguer0.setAceite(true);
      aluguer0.equals("180.0000");
      aluguer0.equals(aluguer1);
      aluguer1.toString();
      aluguer1.getDataFim();
      aluguer0.getDataFim();
      aluguer1.getDataFim();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2146666119), (-2146666119), 4047);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
      Coordinate coordinate0 = new Coordinate((-2146666119), (-2146666119));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Aluguer aluguer0 = new Aluguer("", "55\"SwbO]h", mockGregorianCalendar0, mockGregorianCalendar1, 4047, (-2146666119), (-1853), coordinate1, 4047, false, false, false, false, 2146826585);
      Aluguer aluguer1 = new Aluguer();
      Aluguer aluguer2 = new Aluguer(aluguer1);
      aluguer2.setAlteraPreco(true);
      aluguer0.equals(aluguer2);
      aluguer0.equals("");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      Aluguer aluguer2 = aluguer0.clone();
      aluguer2.setEstadoClassificacao(2713);
      aluguer1.setCustoViagem(1000.0);
      aluguer0.setCustoViagem(2650.5187660948013);
      aluguer1.getMatricula();
      aluguer0.getTempoViagem();
      aluguer0.setAceite(false);
      Aluguer aluguer3 = new Aluguer(aluguer1);
      Aluguer aluguer4 = aluguer3.clone();
      aluguer4.toString();
      aluguer1.equals(aluguer0);
      aluguer1.getListaEspera();
      aluguer0.getEstadoClassificacao();
      aluguer3.getListaEspera();
      boolean boolean0 = aluguer2.equals((Object) null);
      assertEquals(2650.5187660948013, aluguer0.getCustoViagem(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer();
      aluguer1.setListaEspera(true);
      aluguer0.clone();
      aluguer1.toString();
      aluguer0.toString();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertFalse(boolean0);
      
      aluguer1.getListaEspera();
      int int0 = aluguer1.getTempoViagem();
      assertTrue(aluguer1.getListaEspera());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2138), 0);
      Coordinate coordinate1 = new Coordinate((-2352), (-2352));
      Aluguer aluguer0 = new Aluguer(",", (String) null, (GregorianCalendar) null, (GregorianCalendar) null, 0.0, 375, 2259, coordinate1, (-2138), true, true, true, true, 0);
      Aluguer aluguer1 = new Aluguer();
      boolean boolean0 = aluguer0.equals(aluguer1);
      assertTrue(aluguer0.getAlteraPreco());
      assertTrue(aluguer0.getRealizado());
      assertTrue(aluguer0.getAceite());
      assertEquals(375, aluguer0.getTempoAteVeiculo());
      assertEquals(2259, aluguer0.getTempoViagem());
      assertEquals((-2138.0), aluguer0.getDistancia(), 0.01);
      assertEquals(0, aluguer0.getEstadoClassificacao());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertTrue(aluguer0.getListaEspera());
      
      boolean boolean1 = aluguer1.equals((Object) null);
      assertEquals(0, aluguer1.getEstadoClassificacao());
      assertFalse(aluguer1.getAceite());
      assertFalse(aluguer1.getAlteraPreco());
      assertEquals(0.0, aluguer1.getCustoViagem(), 0.01);
      assertEquals(0, aluguer1.getTempoAteVeiculo());
      assertFalse(aluguer1.getRealizado());
      assertEquals(0.0, aluguer1.getDistancia(), 0.01);
      assertEquals(0, aluguer1.getTempoViagem());
      assertTrue(boolean1 == boolean0);
      assertFalse(aluguer1.getListaEspera());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2138), 0);
      Coordinate coordinate1 = new Coordinate((-2352), (-2352));
      Aluguer aluguer0 = new Aluguer(",", (String) null, (GregorianCalendar) null, (GregorianCalendar) null, 0.0, 375, 2259, coordinate1, (-2138), true, true, true, true, (-2352));
      boolean boolean0 = aluguer0.equals(aluguer0);
      boolean boolean1 = aluguer0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      aluguer0.getDataFim();
      assertTrue(aluguer0.getListaEspera());
      assertTrue(aluguer0.getAlteraPreco());
      assertEquals((-2352), aluguer0.getEstadoClassificacao());
      assertEquals((-2138.0), aluguer0.getDistancia(), 0.01);
      assertTrue(aluguer0.getAceite());
      assertTrue(aluguer0.getRealizado());
      assertEquals(0.0, aluguer0.getCustoViagem(), 0.01);
      assertEquals(2259, aluguer0.getTempoViagem());
      assertEquals(375, aluguer0.getTempoAteVeiculo());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Aluguer aluguer0 = new Aluguer();
      Aluguer aluguer1 = new Aluguer(aluguer0);
      aluguer1.toString();
      Aluguer aluguer2 = new Aluguer();
      aluguer2.setEstadoClassificacao((-2138));
      aluguer1.equals(aluguer2);
      assertEquals((-2138), aluguer2.getEstadoClassificacao());
      
      boolean boolean0 = aluguer1.equals(aluguer0);
      assertTrue(boolean0);
  }
}
