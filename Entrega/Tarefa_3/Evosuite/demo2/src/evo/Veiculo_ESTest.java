/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 11:48:41 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.util.Collection;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Veiculo_ESTest extends Veiculo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      veiculo0.setClassificacao((-2147483628));
      veiculo1.equals(veiculo0);
      Object object0 = new Object();
      veiculo0.getDisponibilidade();
      veiculo0.clone();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = new Veiculo(veiculo0);
      Coordinate coordinate0 = new Coordinate((-2194.6), (-2572));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Weather weather0 = new Weather();
      veiculo1.tempoViagemCarro(coordinate1, weather0);
      veiculo1.setDisponibilidade(true);
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      veiculo0.getNIF();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      linkedList0.add(parDatas0);
      ParDatas parDatas1 = new ParDatas(parDatas0);
      veiculo0.setDatasAlugueres(linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.toString();
      Veiculo veiculo2 = veiculo0.clone();
      veiculo2.toString();
      veiculo2.setConsumo((-533.4989845955276));
      veiculo0.getNIF();
      ParDatas parDatas2 = new ParDatas();
      linkedList0.offer(parDatas2);
      veiculo0.setAutonomia(0);
      veiculo0.getPreco();
      veiculo1.getMarca();
      veiculo2.getMarca();
      Coordinate coordinate0 = new Coordinate(0.0, (-4403.0914009));
      Weather weather0 = new Weather();
      veiculo2.tempoViagemCarro(coordinate0, weather0);
      Veiculo veiculo3 = new Veiculo();
      veiculo2.equals(veiculo3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setDisponibilidade(true);
      veiculo0.toString();
      veiculo0.setVelocidade(0);
      veiculo0.getClassificacao();
      veiculo0.setVelocidade((-1039));
      veiculo0.verificaAutonomia((-583), 0);
      Coordinate coordinate0 = new Coordinate(1321.111152, 821.5728478411895);
      coordinate0.equals("*****    VE\u00CDCULO    *****\nMarca: \nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: true\nClassifica\u00E7\u00E3o: 0\n");
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate0, weather0);
      veiculo0.tempoViagemCarro(coordinate0, weather0);
      System.setCurrentTimeMillis(0);
      veiculo0.getDatasAlugueres();
      veiculo0.tempoAteVeiculoPéJa(coordinate0);
      Veiculo veiculo1 = new Veiculo();
      veiculo1.setConsumo((-583));
      veiculo0.equals(veiculo1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-435.7), 0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("zYL!5a$vf@%]5&3N2", "zYL!5a$vf@%]5&3N2", (String) null, 0, 0, 0, 0, coordinate0, true, 5045, linkedList0);
      veiculo0.setMatricula("");
      ParDatas parDatas0 = new ParDatas();
      coordinate0.setLongitude(1.0);
      linkedList0.add(parDatas0);
      linkedList0.add(parDatas0);
      coordinate0.getLongitudeAsString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 1, 1, 1);
      ParDatas parDatas1 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      parDatas0.isAvailable(parDatas1);
      parDatas0.setDataFim(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarroJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Matr\u00EDcula: ", "Matr\u00EDcula: ", "Matr\u00EDcula: ", 1857, 1857, (-233.8221), (-1), (Coordinate) null, false, (-2137266882), linkedList0);
      veiculo0.getPosicao();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1968526675), 457.74602694);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      ParDatas parDatas0 = new ParDatas();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      parDatas0.setDataInicio(mockGregorianCalendar0);
      linkedList0.listIterator();
      linkedList0.add(parDatas0);
      Coordinate coordinate2 = coordinate0.clone();
      coordinate1.getLongitudeAsString();
      linkedList0.add(parDatas0);
      Veiculo veiculo0 = new Veiculo((String) null, (String) null, "Cy.tsw[:tE/`U", (-2169), (-2169), 457.74602694, (-1968526675), coordinate1, false, (-1972), linkedList0);
      veiculo0.getPosicao();
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.getMarca();
      veiculo0.tempoAteVeiculoPéJa(coordinate2);
      veiculo1.getDatasAlugueres();
      veiculo1.getDatasAlugueres();
      ParDatas parDatas1 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      veiculo1.equals(parDatas1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.setAutonomia((-2572));
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      coordinate0.getLongitudeAsString();
      veiculo0.setVelocidade((-2572));
      veiculo0.setPosicao(coordinate0);
      veiculo0.getNIF();
      veiculo0.setNIF("OUzmxh^fI. &");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.setPreco(4.0);
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      coordinate0.toString();
      coordinate0.getLongitudeAsString();
      veiculo0.setVelocidade((-2572));
      veiculo0.setPosicao(coordinate0);
      veiculo0.getNIF();
      veiculo0.setNIF("OUzmxh^fI. &");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.setAutonomia(1624);
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      coordinate0.getLongitudeAsString();
      veiculo0.setVelocidade((-2572));
      veiculo0.setPosicao(coordinate0);
      veiculo0.getNIF();
      veiculo0.setNIF("OUzmxh^fI. &");
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate0, weather0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.toString();
      veiculo0.equals(veiculo0);
      veiculo0.setMarca("C");
      int int0 = (-183);
      veiculo0.setConsumo(3287.00182);
      veiculo0.setVelocidade((-5));
      // Undeclared exception!
      try { 
        MockLocalDate.of((-183), (-5), (-5));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -5
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      ParDatas parDatas1 = new ParDatas(parDatas0);
      linkedList0.add(parDatas1);
      veiculo0.setMarca((String) null);
      ParDatas parDatas2 = new ParDatas(parDatas0);
      veiculo0.setDatasAlugueres(linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.toString();
      Veiculo veiculo2 = veiculo0.clone();
      veiculo2.toString();
      Coordinate coordinate0 = new Coordinate(1290.2338318682, 1290.2338318682);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo3 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: null\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: null\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: null\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", 0, 0, 0.0, 0, coordinate1, true, 1933, linkedList0);
      // Undeclared exception!
      try { 
        veiculo2.equals(veiculo3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2186));
      Coordinate coordinate0 = new Coordinate(0.0, 2696.51833349);
      veiculo0.tempoAteVeiculoPé(coordinate0, (Weather) null);
      Coordinate coordinate1 = new Coordinate(7.35577149, 2696.51833349);
      veiculo0.setMatricula("{D}0X.!");
      double double0 = 1234.71195;
      coordinate1.clone();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=0.0&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "{D}0X.!");
      veiculo0.setConsumo(1234.71195);
      coordinate1.toString();
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPé(coordinate1, (Weather) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected ':' at line 1 column 4 path $.
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1789.0892483), 1560.1204509493655);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      veiculo0.setVelocidade(1998);
      Veiculo veiculo1 = new Veiculo(")cS+w", "*****    VE\u00CDCULO    *****\nMarca: WdEx\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", (String) null, 2143, 2143, 1560.1204509493655, (-2750), coordinate0, false, 950, list0);
      Weather weather0 = new Weather();
      Weather.jsonToMap((String) null);
      veiculo1.tempoAteVeiculoPé(coordinate0, weather0);
      veiculo1.getDatasAlugueres();
      veiculo0.getPosicao();
      veiculo0.getDatasAlugueres();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "*****    VE\u00CDCULO    *****\nMarca: fdE0\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n");
      Veiculo veiculo2 = veiculo1.clone();
      veiculo2.getNIF();
      Veiculo veiculo3 = veiculo0.clone();
      Object object0 = new Object();
      veiculo1.equals(object0);
      Coordinate coordinate1 = new Coordinate(1560.1204509493655, 1998);
      veiculo0.tempoAteVeiculoPéJa(coordinate1);
      veiculo3.tempoAteVeiculoPéJa(coordinate1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.setClassificacao((-3186));
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      coordinate0.getLongitudeAsString();
      veiculo0.setVelocidade((-2572));
      veiculo0.setPosicao(coordinate0);
      veiculo0.getNIF();
      veiculo0.setNIF("OUzmxh^fI. &");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-435.7), 0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("zYL!5a$vf@%]5&3N2", "zYL!5a$vf@%]5&3N2", (String) null, 0, 0, 0, 0, coordinate0, true, 5045, linkedList0);
      veiculo0.setMatricula("");
      ParDatas parDatas0 = new ParDatas();
      coordinate0.setLongitude(1.0);
      linkedList0.add(parDatas0);
      linkedList0.add(parDatas0);
      coordinate0.getLongitudeAsString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 1, 1, 1);
      ParDatas parDatas1 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      parDatas0.isAvailable(parDatas1);
      parDatas0.setDataFim(mockGregorianCalendar0);
      veiculo0.tempoViagemCarroJa(coordinate0);
      Weather weather0 = new Weather();
      linkedList0.add(parDatas0);
      veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
      veiculo0.getClassificacao();
      Coordinate coordinate1 = veiculo0.getPosicao();
      veiculo0.toString();
      veiculo0.setMatricula((String) null);
      veiculo0.tempoAteVeiculoPéJa(coordinate0);
      veiculo0.setClassificacao(0);
      veiculo0.tempoViagemCarro(coordinate1, weather0);
      veiculo0.setNIF("");
      veiculo0.getMatricula();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.setNIF(")cS+w");
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      coordinate0.getLongitudeAsString();
      coordinate0.setLongitude(0.0);
      veiculo0.setVelocidade((-2572));
      veiculo0.setPosicao(coordinate0);
      veiculo0.getNIF();
      veiculo0.setNIF("OUzmxh^fI. &");
      Weather weather0 = new Weather();
      veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=-345.45&lon=0.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Data de fim: ");
      int int0 = 0;
      Coordinate coordinate0 = new Coordinate((-345.45), 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Data de fim: ", "Data de fim: ", "_\"8+h!L~", 0, 0, 0.0, 0, coordinate1, true, 0, linkedList0);
      linkedList0.toArray();
      ParDatas parDatas0 = new ParDatas((GregorianCalendar) null, (GregorianCalendar) null);
      ParDatas parDatas1 = new ParDatas(parDatas0);
      linkedList0.offer(parDatas1);
      Weather weather0 = new Weather();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarro(coordinate0, weather0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = new Veiculo();
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      veiculo0.setVelocidade((-2572));
      veiculo0.getNIF();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://api.openweathermap.org/data/2.5/weather?lat=-435.7&lon=1.0&appid=28c4efcbaf88fde7e5ae89d0b8f05dcd");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "zYL!5a$vf@%]5&3N2");
      Coordinate coordinate0 = new Coordinate((-435.7), 0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("zYL!5a$vf@%]5&3N2", "zYL!5a$vf@%]5&3N2", (String) null, 0, 0, 0, 0, coordinate0, true, 5045, linkedList0);
      veiculo0.setMatricula("");
      ParDatas parDatas0 = new ParDatas();
      coordinate0.setLongitude(1.0);
      linkedList0.add(parDatas0);
      linkedList0.add(parDatas0);
      coordinate0.getLongitudeAsString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 0);
      ParDatas parDatas1 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      parDatas0.isAvailable(parDatas1);
      parDatas0.setDataFim(mockGregorianCalendar0);
      veiculo0.tempoViagemCarroJa(coordinate0);
      Weather weather0 = new Weather();
      linkedList0.add(parDatas0);
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Expected BEGIN_OBJECT but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.Gson", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setMatricula("_SN6'd|[qLiHsVDO");
      veiculo1.setAutonomia((-229));
      veiculo1.getDatasAlugueres();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "_SN6'd|[qLiHsVDO");
      veiculo0.equals(veiculo1);
      veiculo1.equals(veiculo0);
      Coordinate coordinate0 = new Coordinate((-229), (-229));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      veiculo0.tempoAteVeiculoPéJa(coordinate1);
      veiculo0.tempoAteVeiculoPé(coordinate1, (Weather) null);
      veiculo0.getPosicao();
      veiculo1.getNIF();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      double double0 = (-1666.679600459606);
      // Undeclared exception!
      try { 
        veiculo1.setDatasAlugueres((List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.setPreco(10.347122129890952);
      veiculo1.toString();
      veiculo1.equals(veiculo0);
      veiculo0.setMarca("C");
      veiculo0.setConsumo(3287.00182);
      veiculo1.setVelocidade(1);
      LocalDate localDate0 = MockLocalDate.of((-183), 1, 1);
      veiculo1.equals(localDate0);
      veiculo1.setVelocidade((-183));
      veiculo0.getNIF();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.getMatricula();
      veiculo0.setMarca("");
      veiculo1.setConsumo((-707.877008));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "'");
      Coordinate coordinate0 = new Coordinate((-707.877008), (-707.877008));
      veiculo1.getDatasAlugueres();
      Coordinate coordinate1 = new Coordinate(coordinate0);
      coordinate1.getLatitudeAsString();
      coordinate0.clone();
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate1, weather0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      veiculo1.getMarca();
      coordinate0.setLongitude(0);
      System.setCurrentTimeMillis((-9223372036854775808L));
      veiculo0.getMarca();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, (String) null);
      veiculo0.clone();
      Coordinate coordinate2 = new Coordinate((-9223372036854775808L), 637.0);
      veiculo0.tempoViagemCarroJa(coordinate2);
      veiculo0.clone();
      // Undeclared exception!
      try { 
        coordinate0.setLongitude((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The parameter did not pass validation as defined by the CoordinateManager class
         //
         verifyException("Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Nesting problem.");
      Coordinate coordinate0 = new Coordinate((-2572), 60.0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      LinkedList<ChronoLocalDate> linkedList1 = new LinkedList<ChronoLocalDate>();
      linkedList0.retainAll(linkedList1);
      Veiculo veiculo0 = new Veiculo("", "Nesting problem.", "Nesting problem.", (-2572), 70.0, 70.0, (-2572), coordinate0, true, (-2572), linkedList0);
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo0.equals("Nesting problem.");
      veiculo0.setVelocidade((-2092));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      Weather weather0 = new Weather();
      ParDatas parDatas0 = new ParDatas();
      ParDatas parDatas1 = new ParDatas(parDatas0);
      parDatas1.isAvailable(parDatas0);
      coordinate0.getLatitudeAsString();
      linkedList0.add(parDatas1);
      // Undeclared exception!
      try { 
        veiculo1.tempoAteVeiculoPé((Coordinate) null, weather0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(637.0, (-2521));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("g/()Eu8dP<;B&oLj})", "*****    VE\u00CDCULO    *****\nMarca: WdEx\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "@o?o2D", 983, (-1005.523304), (-1005.523304), (-2521), coordinate1, false, 983, linkedList0);
      veiculo0.clone();
      veiculo0.getMarca();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.equals((Object) null);
      veiculo0.setMarca((String) null);
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setVelocidade(1);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      ParDatas parDatas0 = new ParDatas();
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      parDatas0.setDataFim(mockGregorianCalendar0);
      linkedList0.add(parDatas0);
      linkedList0.add(parDatas0);
      veiculo1.setDatasAlugueres(linkedList0);
      Coordinate coordinate0 = new Coordinate(1, 1);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Weather weather0 = new Weather();
      veiculo1.tempoAteVeiculoPé(coordinate1, weather0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setNIF("");
      veiculo0.setAutonomia((-1));
      veiculo0.getClassificacao();
      veiculo0.setPreco(0);
      veiculo0.setNIF("Matr\u00EDcula: ");
      Coordinate coordinate0 = new Coordinate(0, (-308.256270786634));
      veiculo0.tempoViagemCarroJa(coordinate0);
      Veiculo veiculo1 = veiculo0.clone();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      veiculo0.setDatasAlugueres(linkedList0);
      veiculo0.getAutonomia();
      veiculo0.getDisponibilidade();
      veiculo1.toString();
      veiculo1.setVelocidade(0);
      veiculo1.getNIF();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 2.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      List<ParDatas> list0 = veiculo1.getDatasAlugueres();
      Veiculo veiculo2 = new Veiculo("#;g*qL)w", "Veiculo", "Veiculo", (-6793), (-6793), (-6793), (-6793), coordinate1, true, (-6793), list0);
      veiculo0.setClassificacao((-6793));
      Coordinate coordinate2 = coordinate0.clone();
      veiculo2.abastecerVeiculo(0.0);
      veiculo0.setDisponibilidade(true);
      veiculo2.getPreco();
      veiculo1.setVelocidade(0);
      veiculo0.tempoAteVeiculoPéJa(coordinate1);
      veiculo0.getClassificacao();
      veiculo1.setClassificacao((-384));
      veiculo0.custoViagem(0.0);
      Weather weather0 = new Weather();
      veiculo2.tempoAteVeiculoPé(coordinate2, weather0);
      veiculo2.setVelocidade(1516);
      veiculo1.setVelocidade((-292));
      veiculo0.setPreco((-6793));
      veiculo0.setVelocidade(0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.setConsumo(205.14);
      veiculo0.abastecerVeiculo(205.14);
      veiculo0.getDatasAlugueres();
      veiculo0.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setPosicao((Coordinate) null);
      veiculo0.setVelocidade(0);
      veiculo0.setPreco(0);
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      veiculo0.setDatasAlugueres(list0);
      veiculo0.getPreco();
      // Undeclared exception!
      try { 
        veiculo0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(60.0, (-110.709322));
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("", "", "wind", 982, (-110.709322), 982, 457, coordinate0, true, (-1), linkedList0);
      veiculo0.setAutonomia(457);
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.getVelocidade();
      veiculo1.setPreco((-54.9195745));
      veiculo0.setPreco((-2721.657));
      veiculo1.getMarca();
      veiculo0.getDisponibilidade();
      veiculo0.getPosicao();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("j(#Vh?yN1'AZ}X+1", "", "", 1, 2017.289953, 2017.289953, 1, (Coordinate) null, true, 0, linkedList0);
      // Undeclared exception!
      try { 
        veiculo0.tempoAteVeiculoPéJa((Coordinate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, 1.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Veiculo veiculo1 = new Veiculo("", (String) null, ",/xqg3.%B", 0, 1.0, 0.0, 500, coordinate1, true, 0, list0);
      veiculo1.getMarca();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      ParDatas parDatas1 = new ParDatas(parDatas0);
      linkedList0.add(parDatas1);
      veiculo0.setMarca("WdEx");
      ParDatas parDatas2 = new ParDatas(parDatas0);
      linkedList0.add(parDatas2);
      veiculo0.setDatasAlugueres(linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.toString();
      Veiculo veiculo2 = veiculo0.clone();
      veiculo2.toString();
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo3 = new Veiculo("*****    VE\u00CDCULO    *****\nMarca: WdEx\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: WdEx\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", "*****    VE\u00CDCULO    *****\nMarca: WdEx\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n", 0, 0, 0.0, 0, coordinate1, true, 1933, linkedList0);
      veiculo2.equals(veiculo3);
      veiculo2.setConsumo((-533.4989845955276));
      veiculo0.getNIF();
      ParDatas parDatas3 = new ParDatas();
      linkedList0.offer(parDatas3);
      veiculo0.setAutonomia(0);
      veiculo0.setDatasAlugueres(linkedList0);
      veiculo0.getPreco();
      veiculo1.getMarca();
      veiculo3.setNIF("");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1712.4), 0.0);
      coordinate0.clone();
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setAutonomia((-1438));
      List<ParDatas> list0 = veiculo1.getDatasAlugueres();
      Veiculo veiculo2 = new Veiculo("4hn|&.u=@%A", ", ", ", ", (-1438), (-1438), 0.0, (-1438), coordinate1, true, (-1438), list0);
      Coordinate coordinate2 = new Coordinate(coordinate0);
      veiculo1.tempoAteVeiculoPé(coordinate2, (Weather) null);
      coordinate1.toString();
      veiculo1.setPreco(3050.71852);
      veiculo2.getDatasAlugueres();
      veiculo2.custoViagem(492.51);
      veiculo1.setPreco(0.0);
      veiculo1.setPosicao(coordinate1);
      veiculo2.setNIF("4hn|&.u=@%A");
      // Undeclared exception!
      try { 
        veiculo1.abastecerVeiculo(0.4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.getDatasAlugueres();
      veiculo1.setPreco(4.0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), (-1), 0, (-3285), 1611);
      veiculo1.addDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      veiculo1.getDatasAlugueres();
      veiculo0.verificaAutonomia(0, 0);
      veiculo1.getDatasAlugueres();
      veiculo0.getDatasAlugueres();
      veiculo1.setAutonomia((-3488));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1), (-1));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      List<ParDatas> list0 = veiculo1.getDatasAlugueres();
      Veiculo veiculo2 = new Veiculo("Consumo: ", "", "PF$U]U.A", (-1), (-1), (-1), (-1), coordinate1, false, (-1), list0);
      veiculo2.getNIF();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo(">2dgH(*", (String) null, ">2dgH(*", 0, (-39.7369156125284), (-39.7369156125284), 0, (Coordinate) null, false, 0, linkedList0);
      veiculo0.getConsumo();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setClassificacao(0);
      Weather weather0 = new Weather();
      // Undeclared exception!
      try { 
        veiculo0.tempoViagemCarro((Coordinate) null, weather0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Coordinate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Veiculo veiculo0 = null;
      try {
        veiculo0 = new Veiculo((Veiculo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(325, 325);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo0 = new Veiculo();
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      Weather weather0 = new Weather();
      veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
      Weather.getPercentage(2497.0, 0.15);
      Veiculo veiculo1 = new Veiculo("&appid=", "&appid=", "&appid=", 325, 325, 325, 325, coordinate1, false, 325, list0);
      veiculo1.setPreco(1.0);
      veiculo1.setConsumo(1.0);
      veiculo1.setVelocidade(0);
      veiculo1.getAutonomia();
      veiculo1.getConsumo();
      veiculo1.setNIF("'XuMK07|g^vf!");
      veiculo1.equals("'XuMK07|g^vf!");
      veiculo0.getClassificacao();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "cC%Bfq0$Cg.{+#g;j*";
      Coordinate coordinate0 = new Coordinate(4489.213620771255, 0.4);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      boolean boolean0 = true;
      coordinate0.getLongitudeAsString();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("cC%Bfq0$Cg.{+#g;j*", "cC%Bfq0$Cg.{+#g;j*", "Matr\u00EDcula: ", 1, 1, 1, 1, coordinate1, true, 3387, linkedList0);
      veiculo0.tempoViagemCarroJa(coordinate1);
      veiculo0.setNIF("cC%Bfq0$Cg.{+#g;j*");
      veiculo0.getMatricula();
      veiculo0.setDatasAlugueres(linkedList0);
      coordinate0.getLongitudeAsString();
      veiculo0.custoViagem(60.0);
      veiculo0.clone();
      Weather weather0 = new Weather();
      double double0 = 0.0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "]!BPg^<R;y", 3387, 1, 3387, 1, (-842), 0, 937, 1, 948);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 3387
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.clone();
      veiculo0.setConsumo((-316.4793618904));
      veiculo0.setMarca("l\"(GBdk-R].L%Y>}Z");
      Coordinate coordinate0 = new Coordinate((-1099.11056), (-1099.11056));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      veiculo0.setPosicao(coordinate1);
      veiculo0.setVelocidade(1);
      veiculo0.getVelocidade();
      veiculo0.custoViagem(1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(0.0, (-3369.13915265));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      coordinate1.equals("oa7:_yZ=IW");
      coordinate1.getLatitudeAsString();
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate1, weather0);
      veiculo0.setAutonomia(0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Locale locale0 = new Locale("wind", "wind", "s-?&=@k!1rl");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      veiculo0.addDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      Coordinate coordinate0 = veiculo0.getPosicao();
      veiculo0.getPreco();
      Weather weather0 = new Weather();
      veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
      veiculo0.verificaAutonomia(0, 950);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(2279.181454293103, (-3048.009119270944));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Weather weather0 = new Weather();
      veiculo0.tempoAteVeiculoPé(coordinate1, weather0);
      // Undeclared exception!
      try { 
        veiculo0.abastecerVeiculo(60.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setDisponibilidade(false);
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      coordinate0.toString();
      coordinate0.equals(veiculo0);
      veiculo1.tempoAteVeiculoPéJa(coordinate0);
      veiculo0.setAutonomia(0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.clone();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.getMatricula();
      Object object0 = new Object();
      veiculo1.equals(object0);
      Coordinate coordinate0 = new Coordinate((-1.0), 433.24798900237);
      coordinate0.toString();
      veiculo1.tempoAteVeiculoPéJa(coordinate0);
      veiculo0.getVelocidade();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-2454.1), 0.05);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      coordinate0.getLatitudeAsString();
      Veiculo veiculo0 = new Veiculo("", "", "", 1, 1, 0.15, 1, coordinate0, false, 1, linkedList0);
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate0, weather0);
      veiculo0.setPosicao(coordinate0);
      ParDatas parDatas0 = new ParDatas();
      parDatas0.toString();
      ParDatas parDatas1 = new ParDatas(parDatas0);
      linkedList0.add(parDatas1);
      veiculo0.setConsumo((-944.4));
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.equals(linkedList0);
      veiculo1.getPreco();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate((-2252.83), (-229.975712774856));
      veiculo0.tempoViagemCarroJa(coordinate0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      veiculo0.setConsumo((-1666.679600459606));
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 130);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(130, "Classifica\u00E7\u00E3o: ");
      mockGregorianCalendar0.isWeekDateSupported();
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      veiculo1.addDatas(mockGregorianCalendar0, mockGregorianCalendar1);
      veiculo1.setVelocidade(130);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "main";
      String string1 = "=m}Dz*LD')3kO=!,_";
      int int0 = 0;
      double double0 = 0.0;
      Coordinate coordinate0 = null;
      boolean boolean0 = false;
      Coordinate coordinate1 = new Coordinate(70.0, 0.0);
      Veiculo veiculo0 = null;
      try {
        veiculo0 = new Veiculo("=m}Dz*LD')3kO=!,_", "107:5`L$@@", "107:5`L$@@", 0, 0, 0.0, 0, coordinate1, false, 0, (List<ParDatas>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Veiculo", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      coordinate0.getLongitudeAsString();
      veiculo0.setVelocidade((-2572));
      veiculo0.setPosicao(coordinate0);
      veiculo0.getNIF();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.toString();
      veiculo0.getMatricula();
      Coordinate coordinate0 = new Coordinate(0.05, 0.05);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate1, weather0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      veiculo1.setDatasAlugueres(linkedList0);
      veiculo1.getNIF();
      Coordinate coordinate0 = new Coordinate(0.05, 0.0);
      veiculo1.tempoAteVeiculoPéJa(coordinate0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Object object0 = new Object();
      veiculo0.setConsumo(0.0);
      veiculo0.equals(object0);
      veiculo0.setVelocidade(0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-225.283374989), (-902.0));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      LinkedList<ParDatas> linkedList1 = new LinkedList<ParDatas>();
      linkedList0.addAll((Collection<? extends ParDatas>) linkedList1);
      Veiculo veiculo0 = new Veiculo((String) null, (String) null, "veL80f=1", (-2076), (-902.0), (-902.0), (-2076), coordinate1, false, 1, linkedList0);
      veiculo0.getVelocidade();
      linkedList0.pollFirst();
      veiculo0.custoViagem(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-4124), 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      List<ParDatas> list0 = veiculo1.getDatasAlugueres();
      Veiculo veiculo2 = new Veiculo("Pre\u00E7o Base por Km: ", "Pre\u00E7o Base por Km: ", "Pre\u00E7o Base por Km: ", (-4124), 0.0, 0.4, (-4124), coordinate1, true, (-4124), list0);
      veiculo2.getDisponibilidade();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(0.0, (-1.0));
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      coordinate0.getLatitudeAsString();
      Veiculo veiculo0 = new Veiculo("mzXBzG8`kzvI%+?", "mzXBzG8`kzvI%+?", "17`KC(!T/:", 0, 0, 1248.745464265791, 1, coordinate1, false, 1, linkedList0);
      Veiculo veiculo1 = new Veiculo(veiculo0);
      Veiculo veiculo2 = veiculo1.clone();
      ParDatas parDatas0 = new ParDatas((GregorianCalendar) null, (GregorianCalendar) null);
      ParDatas parDatas1 = new ParDatas(parDatas0);
      linkedList0.clear();
      parDatas1.clone();
      parDatas1.setDataFim((GregorianCalendar) null);
      linkedList0.add(parDatas1);
      veiculo2.getClassificacao();
      veiculo2.setAutonomia(1);
      veiculo1.setPreco((-1.0));
      veiculo1.verificaAutonomia((-1377), (-1377));
      Weather weather0 = new Weather();
      veiculo2.tempoAteVeiculoPé(coordinate0, weather0);
      veiculo1.custoViagem((-1149.732206));
      veiculo0.setMarca("17`KC(!T/:");
      veiculo1.clone();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1926, 868.802149265);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Posi\u00E7\u00E3o (latitude e longitude): ", "^XfmX", "b[.;;~4mdA.ARj]}", (-1), (-1), 868.802149265, 1926, coordinate1, false, 1926, linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      // Undeclared exception!
      try { 
        veiculo1.abastecerVeiculo((-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-1), 4.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Bj", "Bj", "Pre\u00E7o Base por Km: ", (-1), (-1), 100.0, (-1), coordinate1, true, (-1), linkedList0);
      veiculo0.clone();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate(1109, 1889.938707);
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      List<ParDatas> list0 = veiculo1.getDatasAlugueres();
      Veiculo veiculo2 = new Veiculo("}/Q", "P|", "", 1109, 1109, 0.0, 1109, coordinate0, false, 1109, list0);
      veiculo2.getMarca();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMarca("http://api.openweathermap.org/data/2.5/weather?lat=");
      veiculo0.setMatricula("");
      veiculo0.setMatricula("");
      veiculo0.custoViagem(60.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Coordinate coordinate0 = new Coordinate(70.0, 0.0);
      coordinate0.toString();
      coordinate0.setLatitude(0.0);
      coordinate0.equals(veiculo0);
      Weather weather0 = null;
      veiculo0.tempoAteVeiculoPé(coordinate0, (Weather) null);
      coordinate0.getLatitudeAsString();
      // Undeclared exception!
      try { 
        veiculo0.abastecerVeiculo(0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division undefined
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMarca("ETV!iJKHaA@}$JD/");
      Coordinate coordinate0 = new Coordinate(0.0, 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      veiculo0.setVelocidade(816);
      Weather weather0 = new Weather();
      Weather.getPercentage(0.0, (-905.3989385258));
      veiculo0.tempoViagemCarro(coordinate1, weather0);
      veiculo0.setNIF("ETV!iJKHaA@}$JD/");
      veiculo0.getClassificacao();
      veiculo0.setVelocidade(0);
      veiculo0.tempoViagemCarro(coordinate1, weather0);
      veiculo0.getPreco();
      veiculo0.verificaAutonomia((-2521), (-308));
      veiculo0.setClassificacao((-1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      Coordinate coordinate0 = new Coordinate(1065.3282891686692, 620.228353788);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      veiculo1.setPosicao(coordinate1);
      veiculo0.setPreco(2.0);
      veiculo1.setMatricula("");
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.verificaAutonomia(4340, (-1));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.custoViagem(0.0);
      veiculo0.getAutonomia();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setAutonomia(3776);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setPreco((-2240.709631760092));
      veiculo0.getDatasAlugueres();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMarca("");
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getNIF();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      // Undeclared exception!
      try { 
        veiculo0.abastecerVeiculo(0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division undefined
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.setAutonomia((-2572));
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      veiculo0.equals(veiculo0);
      veiculo0.setDisponibilidade(true);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setVelocidade((-2572));
      Veiculo veiculo1 = new Veiculo();
      veiculo1.clone();
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      veiculo0.getNIF();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      veiculo1.equals((Object) null);
      veiculo1.getDatasAlugueres();
      Weather weather0 = new Weather();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      ParDatas parDatas0 = new ParDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      linkedList0.add(parDatas0);
      ParDatas parDatas1 = new ParDatas(parDatas0);
      veiculo0.setDatasAlugueres(linkedList0);
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.toString();
      Veiculo veiculo2 = veiculo0.clone();
      veiculo2.toString();
      veiculo2.setConsumo((-533.4989845955276));
      veiculo0.getNIF();
      ParDatas parDatas2 = new ParDatas();
      linkedList0.offer(parDatas2);
      veiculo0.setAutonomia(1);
      veiculo0.getPreco();
      veiculo1.getMarca();
      veiculo2.getMarca();
      Coordinate coordinate0 = new Coordinate(0.0, (-4403.0914009));
      Weather weather0 = new Weather();
      veiculo2.tempoViagemCarro(coordinate0, weather0);
      Veiculo veiculo3 = new Veiculo();
      veiculo2.equals(veiculo3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo();
      veiculo0.setPreco((-2148.678385917184));
      veiculo1.toString();
      veiculo1.equals(veiculo0);
      veiculo0.setMarca("C");
      int int0 = (-160);
      veiculo0.setConsumo(3287.00182);
      veiculo1.setVelocidade((-5));
      // Undeclared exception!
      try { 
        MockLocalDate.of((-160), (-5), (-5));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for MonthOfYear (valid values 1 - 12): -5
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = (-1280);
      double double0 = 4324.390506564063;
      Coordinate coordinate0 = new Coordinate(0, (-1280));
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = new Veiculo(veiculo0);
      List<ParDatas> list0 = veiculo1.getDatasAlugueres();
      veiculo0.equals("");
      veiculo1.setClassificacao((-1280));
      Veiculo veiculo2 = new Veiculo("", "", "", (-1280), 2065.14684, 4324.390506564063, 0, coordinate0, true, (-1280), list0);
      veiculo2.abastecerVeiculo(0);
      Veiculo veiculo3 = new Veiculo(veiculo2);
      Veiculo veiculo4 = veiculo2.clone();
      veiculo4.setVelocidade(0);
      Coordinate coordinate1 = null;
      veiculo4.setAutonomia(0);
      veiculo4.setPosicao((Coordinate) null);
      veiculo0.setAutonomia(0);
      // Undeclared exception!
      try { 
        veiculo2.abastecerVeiculo(2065.14684);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.equals(veiculo0);
      veiculo0.getConsumo();
      Object object0 = new Object();
      veiculo0.equals(object0);
      veiculo0.getDisponibilidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      coordinate0.getLongitudeAsString();
      veiculo0.setVelocidade((-2574));
      veiculo0.setPosicao(coordinate0);
      veiculo0.setNIF("0");
      veiculo0.equals(veiculo1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      veiculo0.setClassificacao(2147483645);
      veiculo1.equals(veiculo0);
      Object object0 = new Object();
      veiculo0.getDisponibilidade();
      veiculo0.clone();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMarca("M");
      veiculo0.setDisponibilidade(true);
      veiculo0.setAutonomia((-2021161078));
      veiculo0.setPreco((-2021161078));
      veiculo0.toString();
      veiculo0.setVelocidade(0);
      veiculo0.getClassificacao();
      veiculo0.setVelocidade((-1039));
      veiculo0.verificaAutonomia((-583), 0);
      Coordinate coordinate0 = new Coordinate(1321.111152, 821.5728478411895);
      coordinate0.equals("*****    VE\u00CDCULO    *****\nMarca: M\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: -2.021161078E9\nConsumo: 0.0\nAutonomia: -2021161078\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: true\nClassifica\u00E7\u00E3o: 0\n");
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate0, weather0);
      veiculo0.toString();
      veiculo0.getMarca();
      Veiculo veiculo1 = new Veiculo();
      List<ParDatas> list0 = veiculo1.getDatasAlugueres();
      Veiculo veiculo2 = new Veiculo("M", "UPEL_CAMEL_CAWE", "M", 0, 70.0, 0.4, 47, coordinate0, false, (-1717986929), list0);
      veiculo0.equals(veiculo2);
      veiculo0.equals("M");
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.setMarca("M");
      veiculo0.toString();
      veiculo0.setVelocidade(0);
      veiculo0.getClassificacao();
      veiculo0.setVelocidade((-1039));
      veiculo0.verificaAutonomia((-583), 0);
      Coordinate coordinate0 = new Coordinate(1321.111152, 821.5728478411895);
      coordinate0.equals("*****    VE\u00CDCULO    *****\nMarca: M\nMatr\u00EDcula: \nNIF do Propriet\u00E1rio: \nVelocidade M\u00E9dia: 0\nPre\u00E7o Base por Km: 0.0\nConsumo: 0.0\nAutonomia: 0\nPosi\u00E7\u00E3o (latitude e longitude): 0, 0\nDispon\u00EDvel: false\nClassifica\u00E7\u00E3o: 0\n");
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate0, weather0);
      veiculo0.tempoViagemCarro(coordinate0, weather0);
      System.setCurrentTimeMillis(0);
      veiculo0.getDatasAlugueres();
      veiculo0.tempoAteVeiculoPéJa(coordinate0);
      Veiculo veiculo1 = new Veiculo();
      veiculo1.setConsumo(100.0);
      veiculo0.equals(veiculo1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      veiculo0.getDatasAlugueres();
      veiculo0.setAutonomia(516);
      veiculo0.setMarca("K5qjgp&n$6j\"E");
      veiculo0.setMatricula("K5qjgp&n$6j\"E");
      veiculo0.toString();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(516, (-1168), 1390, 516, (-1168), (-1168));
      mockGregorianCalendar0.isLeapYear(1390);
      mockGregorianCalendar0.getCalendarType();
      veiculo0.addDatas(mockGregorianCalendar0, mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        veiculo0.abastecerVeiculo((-1168));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Division by zero
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Veiculo veiculo0 = new Veiculo();
      Veiculo veiculo1 = veiculo0.clone();
      veiculo1.setDisponibilidade(true);
      veiculo0.toString();
      veiculo1.getVelocidade();
      Coordinate coordinate0 = veiculo0.getPosicao();
      veiculo0.setMarca("xG.NcvV)!72;E");
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      LinkedHashSet<ParDatas> linkedHashSet0 = new LinkedHashSet<ParDatas>();
      linkedList0.addAll((Collection<? extends ParDatas>) linkedHashSet0);
      veiculo1.setDatasAlugueres(linkedList0);
      Weather weather0 = new Weather();
      veiculo0.tempoAteVeiculoPé(coordinate0, weather0);
      veiculo1.setPosicao(coordinate0);
      veiculo1.getDatasAlugueres();
      veiculo1.setNIF("Data de in\u00EDcio: ");
      assertTrue(veiculo1.getDisponibilidade());
      
      double double0 = veiculo0.custoViagem(1.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Coordinate coordinate0 = new Coordinate((-325.47253868096425), 0.0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      LinkedList<ParDatas> linkedList0 = new LinkedList<ParDatas>();
      Veiculo veiculo0 = new Veiculo("Data de fim: ", "Data de fim: ", "_\"8+h!L~", 0, 0, 0.0, 0, coordinate1, false, 0, linkedList0);
      linkedList0.toArray();
      ParDatas parDatas0 = new ParDatas();
      Weather weather0 = new Weather();
      veiculo0.tempoViagemCarro(coordinate0, weather0);
      veiculo0.setClassificacao(0);
      List<ParDatas> list0 = veiculo0.getDatasAlugueres();
      boolean boolean0 = veiculo0.verificaAutonomia(0, 983);
      assertTrue(boolean0);
      
      veiculo0.setDatasAlugueres(list0);
      veiculo0.setDisponibilidade(false);
      assertFalse(veiculo0.getDisponibilidade());
      assertEquals(0, veiculo0.getAutonomia());
      assertEquals(0, veiculo0.getClassificacao());
  }
}
